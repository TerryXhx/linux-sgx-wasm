// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_messages_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_CheckUpdateStatusRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetLaunchTokenRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetQuoteExRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetQuoteRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetQuoteSizeExRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetSupportedAttKeyIDNumRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetSupportedAttKeyIDsRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetWhiteListRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetWhiteListSizeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_InitQuoteExRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_InitQuoteRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_ReportAttestationErrorRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_SGXGetExtendedEpidGroupIdRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_SGXRegisterRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_SGXSwitchExtendedEpidGroupRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request_SelectAttKeyIDRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_CheckUpdateStatusResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetLaunchTokenResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetQuoteExResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetQuoteResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetQuoteSizeExResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetSupportedAttKeyIDNumResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetSupportedAttKeyIDsResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetWhiteListResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetWhiteListSizeResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_InitQuoteExResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_InitQuoteResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_ReportAttestationErrorResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_SGXGetExtendedEpidGroupIdResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_SGXRegisterResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_SGXSwitchExtendedEpidGroupResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_SelectAttKeyIDResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_UnsupportedRequestResponse;
}  // namespace protobuf_messages_2eproto
namespace aesm {
namespace message {
class Request_InitQuoteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_InitQuoteRequest>
      _instance;
} _Request_InitQuoteRequest_default_instance_;
class Request_GetQuoteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_GetQuoteRequest>
      _instance;
} _Request_GetQuoteRequest_default_instance_;
class Request_GetLaunchTokenRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_GetLaunchTokenRequest>
      _instance;
} _Request_GetLaunchTokenRequest_default_instance_;
class Request_ReportAttestationErrorRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_ReportAttestationErrorRequest>
      _instance;
} _Request_ReportAttestationErrorRequest_default_instance_;
class Request_CheckUpdateStatusRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_CheckUpdateStatusRequest>
      _instance;
} _Request_CheckUpdateStatusRequest_default_instance_;
class Request_GetWhiteListSizeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_GetWhiteListSizeRequest>
      _instance;
} _Request_GetWhiteListSizeRequest_default_instance_;
class Request_GetWhiteListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_GetWhiteListRequest>
      _instance;
} _Request_GetWhiteListRequest_default_instance_;
class Request_SGXGetExtendedEpidGroupIdRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_SGXGetExtendedEpidGroupIdRequest>
      _instance;
} _Request_SGXGetExtendedEpidGroupIdRequest_default_instance_;
class Request_SGXSwitchExtendedEpidGroupRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_SGXSwitchExtendedEpidGroupRequest>
      _instance;
} _Request_SGXSwitchExtendedEpidGroupRequest_default_instance_;
class Request_SGXRegisterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_SGXRegisterRequest>
      _instance;
} _Request_SGXRegisterRequest_default_instance_;
class Request_InitQuoteExRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_InitQuoteExRequest>
      _instance;
} _Request_InitQuoteExRequest_default_instance_;
class Request_SelectAttKeyIDRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_SelectAttKeyIDRequest>
      _instance;
} _Request_SelectAttKeyIDRequest_default_instance_;
class Request_GetQuoteSizeExRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_GetQuoteSizeExRequest>
      _instance;
} _Request_GetQuoteSizeExRequest_default_instance_;
class Request_GetQuoteExRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_GetQuoteExRequest>
      _instance;
} _Request_GetQuoteExRequest_default_instance_;
class Request_GetSupportedAttKeyIDNumRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_GetSupportedAttKeyIDNumRequest>
      _instance;
} _Request_GetSupportedAttKeyIDNumRequest_default_instance_;
class Request_GetSupportedAttKeyIDsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request_GetSupportedAttKeyIDsRequest>
      _instance;
} _Request_GetSupportedAttKeyIDsRequest_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request>
      _instance;
} _Request_default_instance_;
class Response_InitQuoteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_InitQuoteResponse>
      _instance;
} _Response_InitQuoteResponse_default_instance_;
class Response_GetQuoteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_GetQuoteResponse>
      _instance;
} _Response_GetQuoteResponse_default_instance_;
class Response_GetLaunchTokenResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_GetLaunchTokenResponse>
      _instance;
} _Response_GetLaunchTokenResponse_default_instance_;
class Response_ReportAttestationErrorResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_ReportAttestationErrorResponse>
      _instance;
} _Response_ReportAttestationErrorResponse_default_instance_;
class Response_CheckUpdateStatusResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_CheckUpdateStatusResponse>
      _instance;
} _Response_CheckUpdateStatusResponse_default_instance_;
class Response_GetWhiteListSizeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_GetWhiteListSizeResponse>
      _instance;
} _Response_GetWhiteListSizeResponse_default_instance_;
class Response_GetWhiteListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_GetWhiteListResponse>
      _instance;
} _Response_GetWhiteListResponse_default_instance_;
class Response_SGXGetExtendedEpidGroupIdResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_SGXGetExtendedEpidGroupIdResponse>
      _instance;
} _Response_SGXGetExtendedEpidGroupIdResponse_default_instance_;
class Response_SGXSwitchExtendedEpidGroupResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_SGXSwitchExtendedEpidGroupResponse>
      _instance;
} _Response_SGXSwitchExtendedEpidGroupResponse_default_instance_;
class Response_SGXRegisterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_SGXRegisterResponse>
      _instance;
} _Response_SGXRegisterResponse_default_instance_;
class Response_SelectAttKeyIDResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_SelectAttKeyIDResponse>
      _instance;
} _Response_SelectAttKeyIDResponse_default_instance_;
class Response_InitQuoteExResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_InitQuoteExResponse>
      _instance;
} _Response_InitQuoteExResponse_default_instance_;
class Response_GetQuoteSizeExResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_GetQuoteSizeExResponse>
      _instance;
} _Response_GetQuoteSizeExResponse_default_instance_;
class Response_GetQuoteExResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_GetQuoteExResponse>
      _instance;
} _Response_GetQuoteExResponse_default_instance_;
class Response_UnsupportedRequestResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_UnsupportedRequestResponse>
      _instance;
} _Response_UnsupportedRequestResponse_default_instance_;
class Response_GetSupportedAttKeyIDNumResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_GetSupportedAttKeyIDNumResponse>
      _instance;
} _Response_GetSupportedAttKeyIDNumResponse_default_instance_;
class Response_GetSupportedAttKeyIDsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_GetSupportedAttKeyIDsResponse>
      _instance;
} _Response_GetSupportedAttKeyIDsResponse_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response>
      _instance;
} _Response_default_instance_;
}  // namespace message
}  // namespace aesm
namespace protobuf_messages_2eproto {
static void InitDefaultsRequest_InitQuoteRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_InitQuoteRequest_default_instance_;
    new (ptr) ::aesm::message::Request_InitQuoteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_InitQuoteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_InitQuoteRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_InitQuoteRequest}, {}};

static void InitDefaultsRequest_GetQuoteRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetQuoteRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetQuoteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetQuoteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetQuoteRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_GetQuoteRequest}, {}};

static void InitDefaultsRequest_GetLaunchTokenRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetLaunchTokenRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetLaunchTokenRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetLaunchTokenRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetLaunchTokenRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_GetLaunchTokenRequest}, {}};

static void InitDefaultsRequest_ReportAttestationErrorRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_ReportAttestationErrorRequest_default_instance_;
    new (ptr) ::aesm::message::Request_ReportAttestationErrorRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_ReportAttestationErrorRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_ReportAttestationErrorRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_ReportAttestationErrorRequest}, {}};

static void InitDefaultsRequest_CheckUpdateStatusRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_CheckUpdateStatusRequest_default_instance_;
    new (ptr) ::aesm::message::Request_CheckUpdateStatusRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_CheckUpdateStatusRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_CheckUpdateStatusRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_CheckUpdateStatusRequest}, {}};

static void InitDefaultsRequest_GetWhiteListSizeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetWhiteListSizeRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetWhiteListSizeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetWhiteListSizeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetWhiteListSizeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_GetWhiteListSizeRequest}, {}};

static void InitDefaultsRequest_GetWhiteListRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetWhiteListRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetWhiteListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetWhiteListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetWhiteListRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_GetWhiteListRequest}, {}};

static void InitDefaultsRequest_SGXGetExtendedEpidGroupIdRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_SGXGetExtendedEpidGroupIdRequest_default_instance_;
    new (ptr) ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_SGXGetExtendedEpidGroupIdRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_SGXGetExtendedEpidGroupIdRequest}, {}};

static void InitDefaultsRequest_SGXSwitchExtendedEpidGroupRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_SGXSwitchExtendedEpidGroupRequest_default_instance_;
    new (ptr) ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_SGXSwitchExtendedEpidGroupRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_SGXSwitchExtendedEpidGroupRequest}, {}};

static void InitDefaultsRequest_SGXRegisterRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_SGXRegisterRequest_default_instance_;
    new (ptr) ::aesm::message::Request_SGXRegisterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_SGXRegisterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_SGXRegisterRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_SGXRegisterRequest}, {}};

static void InitDefaultsRequest_InitQuoteExRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_InitQuoteExRequest_default_instance_;
    new (ptr) ::aesm::message::Request_InitQuoteExRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_InitQuoteExRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_InitQuoteExRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_InitQuoteExRequest}, {}};

static void InitDefaultsRequest_SelectAttKeyIDRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_SelectAttKeyIDRequest_default_instance_;
    new (ptr) ::aesm::message::Request_SelectAttKeyIDRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_SelectAttKeyIDRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_SelectAttKeyIDRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_SelectAttKeyIDRequest}, {}};

static void InitDefaultsRequest_GetQuoteSizeExRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetQuoteSizeExRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetQuoteSizeExRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetQuoteSizeExRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetQuoteSizeExRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_GetQuoteSizeExRequest}, {}};

static void InitDefaultsRequest_GetQuoteExRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetQuoteExRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetQuoteExRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetQuoteExRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetQuoteExRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_GetQuoteExRequest}, {}};

static void InitDefaultsRequest_GetSupportedAttKeyIDNumRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetSupportedAttKeyIDNumRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetSupportedAttKeyIDNumRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetSupportedAttKeyIDNumRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetSupportedAttKeyIDNumRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_GetSupportedAttKeyIDNumRequest}, {}};

static void InitDefaultsRequest_GetSupportedAttKeyIDsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_GetSupportedAttKeyIDsRequest_default_instance_;
    new (ptr) ::aesm::message::Request_GetSupportedAttKeyIDsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request_GetSupportedAttKeyIDsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_GetSupportedAttKeyIDsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_GetSupportedAttKeyIDsRequest}, {}};

static void InitDefaultsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Request_default_instance_;
    new (ptr) ::aesm::message::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<16> scc_info_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 16, InitDefaultsRequest}, {
      &protobuf_messages_2eproto::scc_info_Request_InitQuoteRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_GetQuoteRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_GetLaunchTokenRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_ReportAttestationErrorRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_GetWhiteListSizeRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_GetWhiteListRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_SGXGetExtendedEpidGroupIdRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_SGXSwitchExtendedEpidGroupRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_SGXRegisterRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_InitQuoteExRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_GetQuoteSizeExRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_GetQuoteExRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_CheckUpdateStatusRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_SelectAttKeyIDRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_GetSupportedAttKeyIDNumRequest.base,
      &protobuf_messages_2eproto::scc_info_Request_GetSupportedAttKeyIDsRequest.base,}};

static void InitDefaultsResponse_InitQuoteResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_InitQuoteResponse_default_instance_;
    new (ptr) ::aesm::message::Response_InitQuoteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_InitQuoteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_InitQuoteResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_InitQuoteResponse}, {}};

static void InitDefaultsResponse_GetQuoteResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetQuoteResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetQuoteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetQuoteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetQuoteResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_GetQuoteResponse}, {}};

static void InitDefaultsResponse_GetLaunchTokenResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetLaunchTokenResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetLaunchTokenResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetLaunchTokenResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetLaunchTokenResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_GetLaunchTokenResponse}, {}};

static void InitDefaultsResponse_ReportAttestationErrorResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_ReportAttestationErrorResponse_default_instance_;
    new (ptr) ::aesm::message::Response_ReportAttestationErrorResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_ReportAttestationErrorResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_ReportAttestationErrorResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_ReportAttestationErrorResponse}, {}};

static void InitDefaultsResponse_CheckUpdateStatusResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_CheckUpdateStatusResponse_default_instance_;
    new (ptr) ::aesm::message::Response_CheckUpdateStatusResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_CheckUpdateStatusResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_CheckUpdateStatusResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_CheckUpdateStatusResponse}, {}};

static void InitDefaultsResponse_GetWhiteListSizeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetWhiteListSizeResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetWhiteListSizeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetWhiteListSizeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetWhiteListSizeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_GetWhiteListSizeResponse}, {}};

static void InitDefaultsResponse_GetWhiteListResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetWhiteListResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetWhiteListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetWhiteListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetWhiteListResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_GetWhiteListResponse}, {}};

static void InitDefaultsResponse_SGXGetExtendedEpidGroupIdResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_SGXGetExtendedEpidGroupIdResponse_default_instance_;
    new (ptr) ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_SGXGetExtendedEpidGroupIdResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_SGXGetExtendedEpidGroupIdResponse}, {}};

static void InitDefaultsResponse_SGXSwitchExtendedEpidGroupResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_SGXSwitchExtendedEpidGroupResponse_default_instance_;
    new (ptr) ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_SGXSwitchExtendedEpidGroupResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_SGXSwitchExtendedEpidGroupResponse}, {}};

static void InitDefaultsResponse_SGXRegisterResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_SGXRegisterResponse_default_instance_;
    new (ptr) ::aesm::message::Response_SGXRegisterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_SGXRegisterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_SGXRegisterResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_SGXRegisterResponse}, {}};

static void InitDefaultsResponse_SelectAttKeyIDResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_SelectAttKeyIDResponse_default_instance_;
    new (ptr) ::aesm::message::Response_SelectAttKeyIDResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_SelectAttKeyIDResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_SelectAttKeyIDResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_SelectAttKeyIDResponse}, {}};

static void InitDefaultsResponse_InitQuoteExResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_InitQuoteExResponse_default_instance_;
    new (ptr) ::aesm::message::Response_InitQuoteExResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_InitQuoteExResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_InitQuoteExResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_InitQuoteExResponse}, {}};

static void InitDefaultsResponse_GetQuoteSizeExResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetQuoteSizeExResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetQuoteSizeExResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetQuoteSizeExResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetQuoteSizeExResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_GetQuoteSizeExResponse}, {}};

static void InitDefaultsResponse_GetQuoteExResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetQuoteExResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetQuoteExResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetQuoteExResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetQuoteExResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_GetQuoteExResponse}, {}};

static void InitDefaultsResponse_UnsupportedRequestResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_UnsupportedRequestResponse_default_instance_;
    new (ptr) ::aesm::message::Response_UnsupportedRequestResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_UnsupportedRequestResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_UnsupportedRequestResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_UnsupportedRequestResponse}, {}};

static void InitDefaultsResponse_GetSupportedAttKeyIDNumResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetSupportedAttKeyIDNumResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetSupportedAttKeyIDNumResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetSupportedAttKeyIDNumResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetSupportedAttKeyIDNumResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_GetSupportedAttKeyIDNumResponse}, {}};

static void InitDefaultsResponse_GetSupportedAttKeyIDsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_GetSupportedAttKeyIDsResponse_default_instance_;
    new (ptr) ::aesm::message::Response_GetSupportedAttKeyIDsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response_GetSupportedAttKeyIDsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_GetSupportedAttKeyIDsResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_GetSupportedAttKeyIDsResponse}, {}};

static void InitDefaultsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesm::message::_Response_default_instance_;
    new (ptr) ::aesm::message::Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesm::message::Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<17> scc_info_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 17, InitDefaultsResponse}, {
      &protobuf_messages_2eproto::scc_info_Response_InitQuoteResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_GetQuoteResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_GetLaunchTokenResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_ReportAttestationErrorResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_GetWhiteListSizeResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_GetWhiteListResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_SGXGetExtendedEpidGroupIdResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_SGXSwitchExtendedEpidGroupResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_SGXRegisterResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_InitQuoteExResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_GetQuoteSizeExResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_GetQuoteExResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_CheckUpdateStatusResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_SelectAttKeyIDResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_UnsupportedRequestResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_GetSupportedAttKeyIDNumResponse.base,
      &protobuf_messages_2eproto::scc_info_Response_GetSupportedAttKeyIDsResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Request_InitQuoteRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_GetQuoteRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_GetLaunchTokenRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_ReportAttestationErrorRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_CheckUpdateStatusRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_GetWhiteListSizeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_GetWhiteListRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_SGXGetExtendedEpidGroupIdRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_SGXSwitchExtendedEpidGroupRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_SGXRegisterRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_InitQuoteExRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_SelectAttKeyIDRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_GetQuoteSizeExRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_GetQuoteExRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_GetSupportedAttKeyIDNumRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_GetSupportedAttKeyIDsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_InitQuoteResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_GetQuoteResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_GetLaunchTokenResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_ReportAttestationErrorResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_CheckUpdateStatusResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_GetWhiteListSizeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_GetWhiteListResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_SGXGetExtendedEpidGroupIdResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_SGXSwitchExtendedEpidGroupResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_SGXRegisterResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_SelectAttKeyIDResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_InitQuoteExResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_GetQuoteSizeExResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_GetQuoteExResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_UnsupportedRequestResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_GetSupportedAttKeyIDNumResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_GetSupportedAttKeyIDsResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response.base);
}

}  // namespace protobuf_messages_2eproto
namespace aesm {
namespace message {

// ===================================================================

void Request_InitQuoteRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_InitQuoteRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_InitQuoteRequest::Request_InitQuoteRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_InitQuoteRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.InitQuoteRequest)
}
Request_InitQuoteRequest::Request_InitQuoteRequest(const Request_InitQuoteRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.InitQuoteRequest)
}

void Request_InitQuoteRequest::SharedCtor() {
  timeout_ = 0u;
}

Request_InitQuoteRequest::~Request_InitQuoteRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.InitQuoteRequest)
  SharedDtor();
}

void Request_InitQuoteRequest::SharedDtor() {
}

void Request_InitQuoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_InitQuoteRequest& Request_InitQuoteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_InitQuoteRequest.base);
  return *internal_default_instance();
}


void Request_InitQuoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.InitQuoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_InitQuoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.InitQuoteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.InitQuoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.InitQuoteRequest)
  return false;
#undef DO_
}

void Request_InitQuoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.InitQuoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.InitQuoteRequest)
}

size_t Request_InitQuoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.InitQuoteRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_InitQuoteRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_InitQuoteRequest*>(&from));
}

void Request_InitQuoteRequest::MergeFrom(const Request_InitQuoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.InitQuoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timeout()) {
    set_timeout(from.timeout());
  }
}

void Request_InitQuoteRequest::CopyFrom(const Request_InitQuoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.InitQuoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_InitQuoteRequest::IsInitialized() const {
  return true;
}

void Request_InitQuoteRequest::Swap(Request_InitQuoteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_InitQuoteRequest::InternalSwap(Request_InitQuoteRequest* other) {
  using std::swap;
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_InitQuoteRequest::GetTypeName() const {
  return "aesm.message.Request.InitQuoteRequest";
}


// ===================================================================

void Request_GetQuoteRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_GetQuoteRequest::kReportFieldNumber;
const int Request_GetQuoteRequest::kQuoteTypeFieldNumber;
const int Request_GetQuoteRequest::kSpidFieldNumber;
const int Request_GetQuoteRequest::kNonceFieldNumber;
const int Request_GetQuoteRequest::kSigRlFieldNumber;
const int Request_GetQuoteRequest::kBufSizeFieldNumber;
const int Request_GetQuoteRequest::kQeReportFieldNumber;
const int Request_GetQuoteRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_GetQuoteRequest::Request_GetQuoteRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_GetQuoteRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetQuoteRequest)
}
Request_GetQuoteRequest::Request_GetQuoteRequest(const Request_GetQuoteRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_report()) {
    report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_);
  }
  spid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_spid()) {
    spid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spid_);
  }
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nonce()) {
    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  sig_rl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sig_rl()) {
    sig_rl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_rl_);
  }
  ::memcpy(&quote_type_, &from.quote_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&quote_type_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetQuoteRequest)
}

void Request_GetQuoteRequest::SharedCtor() {
  report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_rl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&quote_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&quote_type_)) + sizeof(timeout_));
}

Request_GetQuoteRequest::~Request_GetQuoteRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetQuoteRequest)
  SharedDtor();
}

void Request_GetQuoteRequest::SharedDtor() {
  report_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_rl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request_GetQuoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetQuoteRequest& Request_GetQuoteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_GetQuoteRequest.base);
  return *internal_default_instance();
}


void Request_GetQuoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetQuoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      report_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      spid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      nonce_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      sig_rl_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&quote_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&quote_type_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_GetQuoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetQuoteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes report = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 quote_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_quote_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quote_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes spid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes nonce = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nonce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sig_rl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sig_rl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 buf_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_buf_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buf_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool qe_report = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_qe_report();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &qe_report_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetQuoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetQuoteRequest)
  return false;
#undef DO_
}

void Request_GetQuoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetQuoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes report = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->report(), output);
  }

  // required uint32 quote_type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quote_type(), output);
  }

  // required bytes spid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->spid(), output);
  }

  // optional bytes nonce = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->nonce(), output);
  }

  // optional bytes sig_rl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sig_rl(), output);
  }

  // required uint32 buf_size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buf_size(), output);
  }

  // optional bool qe_report = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->qe_report(), output);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetQuoteRequest)
}

size_t Request_GetQuoteRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.GetQuoteRequest)
  size_t total_size = 0;

  if (has_report()) {
    // required bytes report = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->report());
  }

  if (has_spid()) {
    // required bytes spid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->spid());
  }

  if (has_quote_type()) {
    // required uint32 quote_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quote_type());
  }

  if (has_buf_size()) {
    // required uint32 buf_size = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buf_size());
  }

  return total_size;
}
size_t Request_GetQuoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetQuoteRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000033) ^ 0x00000033) == 0) {  // All required fields are present.
    // required bytes report = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->report());

    // required bytes spid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->spid());

    // required uint32 quote_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quote_type());

    // required uint32 buf_size = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buf_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional bytes nonce = 4;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nonce());
    }

    // optional bytes sig_rl = 5;
    if (has_sig_rl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sig_rl());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional bool qe_report = 7;
    if (has_qe_report()) {
      total_size += 1 + 1;
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetQuoteRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_GetQuoteRequest*>(&from));
}

void Request_GetQuoteRequest::MergeFrom(const Request_GetQuoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetQuoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_report();
      report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_spid();
      spid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_nonce();
      nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_sig_rl();
      sig_rl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_rl_);
    }
    if (cached_has_bits & 0x00000010u) {
      quote_type_ = from.quote_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      buf_size_ = from.buf_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      qe_report_ = from.qe_report_;
    }
    if (cached_has_bits & 0x00000080u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_GetQuoteRequest::CopyFrom(const Request_GetQuoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetQuoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetQuoteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;
  return true;
}

void Request_GetQuoteRequest::Swap(Request_GetQuoteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_GetQuoteRequest::InternalSwap(Request_GetQuoteRequest* other) {
  using std::swap;
  report_.Swap(&other->report_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spid_.Swap(&other->spid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nonce_.Swap(&other->nonce_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sig_rl_.Swap(&other->sig_rl_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(quote_type_, other->quote_type_);
  swap(buf_size_, other->buf_size_);
  swap(qe_report_, other->qe_report_);
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_GetQuoteRequest::GetTypeName() const {
  return "aesm.message.Request.GetQuoteRequest";
}


// ===================================================================

void Request_GetLaunchTokenRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_GetLaunchTokenRequest::kMrEnclaveFieldNumber;
const int Request_GetLaunchTokenRequest::kMrSignerFieldNumber;
const int Request_GetLaunchTokenRequest::kSeAttributesFieldNumber;
const int Request_GetLaunchTokenRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_GetLaunchTokenRequest::Request_GetLaunchTokenRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_GetLaunchTokenRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetLaunchTokenRequest)
}
Request_GetLaunchTokenRequest::Request_GetLaunchTokenRequest(const Request_GetLaunchTokenRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mr_enclave_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mr_enclave()) {
    mr_enclave_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mr_enclave_);
  }
  mr_signer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mr_signer()) {
    mr_signer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mr_signer_);
  }
  se_attributes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_se_attributes()) {
    se_attributes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.se_attributes_);
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetLaunchTokenRequest)
}

void Request_GetLaunchTokenRequest::SharedCtor() {
  mr_enclave_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mr_signer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  se_attributes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
}

Request_GetLaunchTokenRequest::~Request_GetLaunchTokenRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetLaunchTokenRequest)
  SharedDtor();
}

void Request_GetLaunchTokenRequest::SharedDtor() {
  mr_enclave_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mr_signer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  se_attributes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request_GetLaunchTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetLaunchTokenRequest& Request_GetLaunchTokenRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_GetLaunchTokenRequest.base);
  return *internal_default_instance();
}


void Request_GetLaunchTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetLaunchTokenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mr_enclave_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mr_signer_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      se_attributes_.ClearNonDefaultToEmptyNoArena();
    }
  }
  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_GetLaunchTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetLaunchTokenRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes mr_enclave = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mr_enclave()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes mr_signer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mr_signer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes se_attributes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_se_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetLaunchTokenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetLaunchTokenRequest)
  return false;
#undef DO_
}

void Request_GetLaunchTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetLaunchTokenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes mr_enclave = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->mr_enclave(), output);
  }

  // required bytes mr_signer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mr_signer(), output);
  }

  // required bytes se_attributes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->se_attributes(), output);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetLaunchTokenRequest)
}

size_t Request_GetLaunchTokenRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.GetLaunchTokenRequest)
  size_t total_size = 0;

  if (has_mr_enclave()) {
    // required bytes mr_enclave = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mr_enclave());
  }

  if (has_mr_signer()) {
    // required bytes mr_signer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mr_signer());
  }

  if (has_se_attributes()) {
    // required bytes se_attributes = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->se_attributes());
  }

  return total_size;
}
size_t Request_GetLaunchTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetLaunchTokenRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes mr_enclave = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mr_enclave());

    // required bytes mr_signer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mr_signer());

    // required bytes se_attributes = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->se_attributes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetLaunchTokenRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_GetLaunchTokenRequest*>(&from));
}

void Request_GetLaunchTokenRequest::MergeFrom(const Request_GetLaunchTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetLaunchTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mr_enclave();
      mr_enclave_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mr_enclave_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mr_signer();
      mr_signer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mr_signer_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_se_attributes();
      se_attributes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.se_attributes_);
    }
    if (cached_has_bits & 0x00000008u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_GetLaunchTokenRequest::CopyFrom(const Request_GetLaunchTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetLaunchTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetLaunchTokenRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Request_GetLaunchTokenRequest::Swap(Request_GetLaunchTokenRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_GetLaunchTokenRequest::InternalSwap(Request_GetLaunchTokenRequest* other) {
  using std::swap;
  mr_enclave_.Swap(&other->mr_enclave_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mr_signer_.Swap(&other->mr_signer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  se_attributes_.Swap(&other->se_attributes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_GetLaunchTokenRequest::GetTypeName() const {
  return "aesm.message.Request.GetLaunchTokenRequest";
}


// ===================================================================

void Request_ReportAttestationErrorRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_ReportAttestationErrorRequest::kPlatformInfoFieldNumber;
const int Request_ReportAttestationErrorRequest::kAttestationErrorCodeFieldNumber;
const int Request_ReportAttestationErrorRequest::kUpdateInfoSizeFieldNumber;
const int Request_ReportAttestationErrorRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_ReportAttestationErrorRequest::Request_ReportAttestationErrorRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_ReportAttestationErrorRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.ReportAttestationErrorRequest)
}
Request_ReportAttestationErrorRequest::Request_ReportAttestationErrorRequest(const Request_ReportAttestationErrorRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  platform_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform_info()) {
    platform_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_info_);
  }
  ::memcpy(&attestation_error_code_, &from.attestation_error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&attestation_error_code_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.ReportAttestationErrorRequest)
}

void Request_ReportAttestationErrorRequest::SharedCtor() {
  platform_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&attestation_error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&attestation_error_code_)) + sizeof(timeout_));
}

Request_ReportAttestationErrorRequest::~Request_ReportAttestationErrorRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.ReportAttestationErrorRequest)
  SharedDtor();
}

void Request_ReportAttestationErrorRequest::SharedDtor() {
  platform_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request_ReportAttestationErrorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_ReportAttestationErrorRequest& Request_ReportAttestationErrorRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_ReportAttestationErrorRequest.base);
  return *internal_default_instance();
}


void Request_ReportAttestationErrorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.ReportAttestationErrorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    platform_info_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&attestation_error_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&attestation_error_code_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_ReportAttestationErrorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.ReportAttestationErrorRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes platform_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 attestation_error_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_attestation_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attestation_error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 update_info_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_update_info_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_info_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.ReportAttestationErrorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.ReportAttestationErrorRequest)
  return false;
#undef DO_
}

void Request_ReportAttestationErrorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.ReportAttestationErrorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes platform_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->platform_info(), output);
  }

  // required uint32 attestation_error_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attestation_error_code(), output);
  }

  // required uint32 update_info_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->update_info_size(), output);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.ReportAttestationErrorRequest)
}

size_t Request_ReportAttestationErrorRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.ReportAttestationErrorRequest)
  size_t total_size = 0;

  if (has_platform_info()) {
    // required bytes platform_info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->platform_info());
  }

  if (has_attestation_error_code()) {
    // required uint32 attestation_error_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->attestation_error_code());
  }

  if (has_update_info_size()) {
    // required uint32 update_info_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_info_size());
  }

  return total_size;
}
size_t Request_ReportAttestationErrorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.ReportAttestationErrorRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes platform_info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->platform_info());

    // required uint32 attestation_error_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->attestation_error_code());

    // required uint32 update_info_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_info_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_ReportAttestationErrorRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_ReportAttestationErrorRequest*>(&from));
}

void Request_ReportAttestationErrorRequest::MergeFrom(const Request_ReportAttestationErrorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.ReportAttestationErrorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_platform_info();
      platform_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_info_);
    }
    if (cached_has_bits & 0x00000002u) {
      attestation_error_code_ = from.attestation_error_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      update_info_size_ = from.update_info_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_ReportAttestationErrorRequest::CopyFrom(const Request_ReportAttestationErrorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.ReportAttestationErrorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_ReportAttestationErrorRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Request_ReportAttestationErrorRequest::Swap(Request_ReportAttestationErrorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_ReportAttestationErrorRequest::InternalSwap(Request_ReportAttestationErrorRequest* other) {
  using std::swap;
  platform_info_.Swap(&other->platform_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attestation_error_code_, other->attestation_error_code_);
  swap(update_info_size_, other->update_info_size_);
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_ReportAttestationErrorRequest::GetTypeName() const {
  return "aesm.message.Request.ReportAttestationErrorRequest";
}


// ===================================================================

void Request_CheckUpdateStatusRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_CheckUpdateStatusRequest::kPlatformInfoFieldNumber;
const int Request_CheckUpdateStatusRequest::kUpdateInfoSizeFieldNumber;
const int Request_CheckUpdateStatusRequest::kConfigFieldNumber;
const int Request_CheckUpdateStatusRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_CheckUpdateStatusRequest::Request_CheckUpdateStatusRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_CheckUpdateStatusRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.CheckUpdateStatusRequest)
}
Request_CheckUpdateStatusRequest::Request_CheckUpdateStatusRequest(const Request_CheckUpdateStatusRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  platform_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform_info()) {
    platform_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_info_);
  }
  ::memcpy(&update_info_size_, &from.update_info_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&update_info_size_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.CheckUpdateStatusRequest)
}

void Request_CheckUpdateStatusRequest::SharedCtor() {
  platform_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&update_info_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&update_info_size_)) + sizeof(timeout_));
}

Request_CheckUpdateStatusRequest::~Request_CheckUpdateStatusRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.CheckUpdateStatusRequest)
  SharedDtor();
}

void Request_CheckUpdateStatusRequest::SharedDtor() {
  platform_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request_CheckUpdateStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_CheckUpdateStatusRequest& Request_CheckUpdateStatusRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_CheckUpdateStatusRequest.base);
  return *internal_default_instance();
}


void Request_CheckUpdateStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.CheckUpdateStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    platform_info_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&update_info_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&update_info_size_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_CheckUpdateStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.CheckUpdateStatusRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes platform_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 update_info_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_update_info_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_info_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_config();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.CheckUpdateStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.CheckUpdateStatusRequest)
  return false;
#undef DO_
}

void Request_CheckUpdateStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.CheckUpdateStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes platform_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->platform_info(), output);
  }

  // required uint32 update_info_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_info_size(), output);
  }

  // required uint32 config = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->config(), output);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.CheckUpdateStatusRequest)
}

size_t Request_CheckUpdateStatusRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.CheckUpdateStatusRequest)
  size_t total_size = 0;

  if (has_update_info_size()) {
    // required uint32 update_info_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_info_size());
  }

  if (has_config()) {
    // required uint32 config = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config());
  }

  return total_size;
}
size_t Request_CheckUpdateStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.CheckUpdateStatusRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 update_info_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_info_size());

    // required uint32 config = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes platform_info = 1;
  if (has_platform_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->platform_info());
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_CheckUpdateStatusRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_CheckUpdateStatusRequest*>(&from));
}

void Request_CheckUpdateStatusRequest::MergeFrom(const Request_CheckUpdateStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.CheckUpdateStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_platform_info();
      platform_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_info_);
    }
    if (cached_has_bits & 0x00000002u) {
      update_info_size_ = from.update_info_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      config_ = from.config_;
    }
    if (cached_has_bits & 0x00000008u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_CheckUpdateStatusRequest::CopyFrom(const Request_CheckUpdateStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.CheckUpdateStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_CheckUpdateStatusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void Request_CheckUpdateStatusRequest::Swap(Request_CheckUpdateStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_CheckUpdateStatusRequest::InternalSwap(Request_CheckUpdateStatusRequest* other) {
  using std::swap;
  platform_info_.Swap(&other->platform_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(update_info_size_, other->update_info_size_);
  swap(config_, other->config_);
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_CheckUpdateStatusRequest::GetTypeName() const {
  return "aesm.message.Request.CheckUpdateStatusRequest";
}


// ===================================================================

void Request_GetWhiteListSizeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_GetWhiteListSizeRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_GetWhiteListSizeRequest::Request_GetWhiteListSizeRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_GetWhiteListSizeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetWhiteListSizeRequest)
}
Request_GetWhiteListSizeRequest::Request_GetWhiteListSizeRequest(const Request_GetWhiteListSizeRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetWhiteListSizeRequest)
}

void Request_GetWhiteListSizeRequest::SharedCtor() {
  timeout_ = 0u;
}

Request_GetWhiteListSizeRequest::~Request_GetWhiteListSizeRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetWhiteListSizeRequest)
  SharedDtor();
}

void Request_GetWhiteListSizeRequest::SharedDtor() {
}

void Request_GetWhiteListSizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetWhiteListSizeRequest& Request_GetWhiteListSizeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_GetWhiteListSizeRequest.base);
  return *internal_default_instance();
}


void Request_GetWhiteListSizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetWhiteListSizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_GetWhiteListSizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetWhiteListSizeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetWhiteListSizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetWhiteListSizeRequest)
  return false;
#undef DO_
}

void Request_GetWhiteListSizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetWhiteListSizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetWhiteListSizeRequest)
}

size_t Request_GetWhiteListSizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetWhiteListSizeRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetWhiteListSizeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_GetWhiteListSizeRequest*>(&from));
}

void Request_GetWhiteListSizeRequest::MergeFrom(const Request_GetWhiteListSizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetWhiteListSizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timeout()) {
    set_timeout(from.timeout());
  }
}

void Request_GetWhiteListSizeRequest::CopyFrom(const Request_GetWhiteListSizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetWhiteListSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetWhiteListSizeRequest::IsInitialized() const {
  return true;
}

void Request_GetWhiteListSizeRequest::Swap(Request_GetWhiteListSizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_GetWhiteListSizeRequest::InternalSwap(Request_GetWhiteListSizeRequest* other) {
  using std::swap;
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_GetWhiteListSizeRequest::GetTypeName() const {
  return "aesm.message.Request.GetWhiteListSizeRequest";
}


// ===================================================================

void Request_GetWhiteListRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_GetWhiteListRequest::kWhiteListSizeFieldNumber;
const int Request_GetWhiteListRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_GetWhiteListRequest::Request_GetWhiteListRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_GetWhiteListRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetWhiteListRequest)
}
Request_GetWhiteListRequest::Request_GetWhiteListRequest(const Request_GetWhiteListRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&white_list_size_, &from.white_list_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&white_list_size_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetWhiteListRequest)
}

void Request_GetWhiteListRequest::SharedCtor() {
  ::memset(&white_list_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&white_list_size_)) + sizeof(timeout_));
}

Request_GetWhiteListRequest::~Request_GetWhiteListRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetWhiteListRequest)
  SharedDtor();
}

void Request_GetWhiteListRequest::SharedDtor() {
}

void Request_GetWhiteListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetWhiteListRequest& Request_GetWhiteListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_GetWhiteListRequest.base);
  return *internal_default_instance();
}


void Request_GetWhiteListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetWhiteListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&white_list_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&white_list_size_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_GetWhiteListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetWhiteListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 white_list_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_white_list_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &white_list_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetWhiteListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetWhiteListRequest)
  return false;
#undef DO_
}

void Request_GetWhiteListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetWhiteListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 white_list_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->white_list_size(), output);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetWhiteListRequest)
}

size_t Request_GetWhiteListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetWhiteListRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 white_list_size = 1;
    if (has_white_list_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->white_list_size());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetWhiteListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_GetWhiteListRequest*>(&from));
}

void Request_GetWhiteListRequest::MergeFrom(const Request_GetWhiteListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetWhiteListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      white_list_size_ = from.white_list_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_GetWhiteListRequest::CopyFrom(const Request_GetWhiteListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetWhiteListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetWhiteListRequest::IsInitialized() const {
  return true;
}

void Request_GetWhiteListRequest::Swap(Request_GetWhiteListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_GetWhiteListRequest::InternalSwap(Request_GetWhiteListRequest* other) {
  using std::swap;
  swap(white_list_size_, other->white_list_size_);
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_GetWhiteListRequest::GetTypeName() const {
  return "aesm.message.Request.GetWhiteListRequest";
}


// ===================================================================

void Request_SGXGetExtendedEpidGroupIdRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_SGXGetExtendedEpidGroupIdRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_SGXGetExtendedEpidGroupIdRequest::Request_SGXGetExtendedEpidGroupIdRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_SGXGetExtendedEpidGroupIdRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
}
Request_SGXGetExtendedEpidGroupIdRequest::Request_SGXGetExtendedEpidGroupIdRequest(const Request_SGXGetExtendedEpidGroupIdRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
}

void Request_SGXGetExtendedEpidGroupIdRequest::SharedCtor() {
  timeout_ = 0u;
}

Request_SGXGetExtendedEpidGroupIdRequest::~Request_SGXGetExtendedEpidGroupIdRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  SharedDtor();
}

void Request_SGXGetExtendedEpidGroupIdRequest::SharedDtor() {
}

void Request_SGXGetExtendedEpidGroupIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_SGXGetExtendedEpidGroupIdRequest& Request_SGXGetExtendedEpidGroupIdRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_SGXGetExtendedEpidGroupIdRequest.base);
  return *internal_default_instance();
}


void Request_SGXGetExtendedEpidGroupIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_SGXGetExtendedEpidGroupIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  return false;
#undef DO_
}

void Request_SGXGetExtendedEpidGroupIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
}

size_t Request_SGXGetExtendedEpidGroupIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_SGXGetExtendedEpidGroupIdRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_SGXGetExtendedEpidGroupIdRequest*>(&from));
}

void Request_SGXGetExtendedEpidGroupIdRequest::MergeFrom(const Request_SGXGetExtendedEpidGroupIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timeout()) {
    set_timeout(from.timeout());
  }
}

void Request_SGXGetExtendedEpidGroupIdRequest::CopyFrom(const Request_SGXGetExtendedEpidGroupIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SGXGetExtendedEpidGroupIdRequest::IsInitialized() const {
  return true;
}

void Request_SGXGetExtendedEpidGroupIdRequest::Swap(Request_SGXGetExtendedEpidGroupIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_SGXGetExtendedEpidGroupIdRequest::InternalSwap(Request_SGXGetExtendedEpidGroupIdRequest* other) {
  using std::swap;
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_SGXGetExtendedEpidGroupIdRequest::GetTypeName() const {
  return "aesm.message.Request.SGXGetExtendedEpidGroupIdRequest";
}


// ===================================================================

void Request_SGXSwitchExtendedEpidGroupRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_SGXSwitchExtendedEpidGroupRequest::kXGroupIdFieldNumber;
const int Request_SGXSwitchExtendedEpidGroupRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_SGXSwitchExtendedEpidGroupRequest::Request_SGXSwitchExtendedEpidGroupRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_SGXSwitchExtendedEpidGroupRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
}
Request_SGXSwitchExtendedEpidGroupRequest::Request_SGXSwitchExtendedEpidGroupRequest(const Request_SGXSwitchExtendedEpidGroupRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_group_id_, &from.x_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&x_group_id_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
}

void Request_SGXSwitchExtendedEpidGroupRequest::SharedCtor() {
  ::memset(&x_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&x_group_id_)) + sizeof(timeout_));
}

Request_SGXSwitchExtendedEpidGroupRequest::~Request_SGXSwitchExtendedEpidGroupRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  SharedDtor();
}

void Request_SGXSwitchExtendedEpidGroupRequest::SharedDtor() {
}

void Request_SGXSwitchExtendedEpidGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_SGXSwitchExtendedEpidGroupRequest& Request_SGXSwitchExtendedEpidGroupRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_SGXSwitchExtendedEpidGroupRequest.base);
  return *internal_default_instance();
}


void Request_SGXSwitchExtendedEpidGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&x_group_id_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_SGXSwitchExtendedEpidGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  return false;
#undef DO_
}

void Request_SGXSwitchExtendedEpidGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 x_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x_group_id(), output);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
}

size_t Request_SGXSwitchExtendedEpidGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 x_group_id = 1;
    if (has_x_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x_group_id());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_SGXSwitchExtendedEpidGroupRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_SGXSwitchExtendedEpidGroupRequest*>(&from));
}

void Request_SGXSwitchExtendedEpidGroupRequest::MergeFrom(const Request_SGXSwitchExtendedEpidGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_group_id_ = from.x_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_SGXSwitchExtendedEpidGroupRequest::CopyFrom(const Request_SGXSwitchExtendedEpidGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SGXSwitchExtendedEpidGroupRequest::IsInitialized() const {
  return true;
}

void Request_SGXSwitchExtendedEpidGroupRequest::Swap(Request_SGXSwitchExtendedEpidGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_SGXSwitchExtendedEpidGroupRequest::InternalSwap(Request_SGXSwitchExtendedEpidGroupRequest* other) {
  using std::swap;
  swap(x_group_id_, other->x_group_id_);
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_SGXSwitchExtendedEpidGroupRequest::GetTypeName() const {
  return "aesm.message.Request.SGXSwitchExtendedEpidGroupRequest";
}


// ===================================================================

void Request_SGXRegisterRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_SGXRegisterRequest::kBufFieldNumber;
const int Request_SGXRegisterRequest::kDataTypeFieldNumber;
const int Request_SGXRegisterRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_SGXRegisterRequest::Request_SGXRegisterRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_SGXRegisterRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.SGXRegisterRequest)
}
Request_SGXRegisterRequest::Request_SGXRegisterRequest(const Request_SGXRegisterRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buf()) {
    buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SGXRegisterRequest)
}

void Request_SGXRegisterRequest::SharedCtor() {
  buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(timeout_));
}

Request_SGXRegisterRequest::~Request_SGXRegisterRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SGXRegisterRequest)
  SharedDtor();
}

void Request_SGXRegisterRequest::SharedDtor() {
  buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request_SGXRegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_SGXRegisterRequest& Request_SGXRegisterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_SGXRegisterRequest.base);
  return *internal_default_instance();
}


void Request_SGXRegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.SGXRegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    buf_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&data_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&data_type_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_SGXRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.SGXRegisterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes buf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 data_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_data_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.SGXRegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.SGXRegisterRequest)
  return false;
#undef DO_
}

void Request_SGXRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.SGXRegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes buf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->buf(), output);
  }

  // required uint32 data_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_type(), output);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.SGXRegisterRequest)
}

size_t Request_SGXRegisterRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.SGXRegisterRequest)
  size_t total_size = 0;

  if (has_buf()) {
    // required bytes buf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buf());
  }

  if (has_data_type()) {
    // required uint32 data_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_type());
  }

  return total_size;
}
size_t Request_SGXRegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.SGXRegisterRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes buf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buf());

    // required uint32 data_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_SGXRegisterRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_SGXRegisterRequest*>(&from));
}

void Request_SGXRegisterRequest::MergeFrom(const Request_SGXRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.SGXRegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_buf();
      buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buf_);
    }
    if (cached_has_bits & 0x00000002u) {
      data_type_ = from.data_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_SGXRegisterRequest::CopyFrom(const Request_SGXRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.SGXRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SGXRegisterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Request_SGXRegisterRequest::Swap(Request_SGXRegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_SGXRegisterRequest::InternalSwap(Request_SGXRegisterRequest* other) {
  using std::swap;
  buf_.Swap(&other->buf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_type_, other->data_type_);
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_SGXRegisterRequest::GetTypeName() const {
  return "aesm.message.Request.SGXRegisterRequest";
}


// ===================================================================

void Request_InitQuoteExRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_InitQuoteExRequest::kAttKeyIdFieldNumber;
const int Request_InitQuoteExRequest::kBPubKeyIdFieldNumber;
const int Request_InitQuoteExRequest::kBufSizeFieldNumber;
const int Request_InitQuoteExRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_InitQuoteExRequest::Request_InitQuoteExRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_InitQuoteExRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.InitQuoteExRequest)
}
Request_InitQuoteExRequest::Request_InitQuoteExRequest(const Request_InitQuoteExRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  att_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_att_key_id()) {
    att_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.att_key_id_);
  }
  ::memcpy(&buf_size_, &from.buf_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.InitQuoteExRequest)
}

void Request_InitQuoteExRequest::SharedCtor() {
  att_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&buf_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
}

Request_InitQuoteExRequest::~Request_InitQuoteExRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.InitQuoteExRequest)
  SharedDtor();
}

void Request_InitQuoteExRequest::SharedDtor() {
  att_key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request_InitQuoteExRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_InitQuoteExRequest& Request_InitQuoteExRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_InitQuoteExRequest.base);
  return *internal_default_instance();
}


void Request_InitQuoteExRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.InitQuoteExRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    att_key_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&buf_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_InitQuoteExRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.InitQuoteExRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes att_key_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_att_key_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool b_pub_key_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_b_pub_key_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_pub_key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 buf_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_buf_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buf_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.InitQuoteExRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.InitQuoteExRequest)
  return false;
#undef DO_
}

void Request_InitQuoteExRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.InitQuoteExRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes att_key_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->att_key_id(), output);
  }

  // required bool b_pub_key_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->b_pub_key_id(), output);
  }

  // optional uint64 buf_size = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->buf_size(), output);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.InitQuoteExRequest)
}

size_t Request_InitQuoteExRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.InitQuoteExRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required bool b_pub_key_id = 3;
  if (has_b_pub_key_id()) {
    total_size += 1 + 1;
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes att_key_id = 1;
    if (has_att_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->att_key_id());
    }

    // optional uint64 buf_size = 4;
    if (has_buf_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buf_size());
    }

  }
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_InitQuoteExRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_InitQuoteExRequest*>(&from));
}

void Request_InitQuoteExRequest::MergeFrom(const Request_InitQuoteExRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.InitQuoteExRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_att_key_id();
      att_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.att_key_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      buf_size_ = from.buf_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_pub_key_id_ = from.b_pub_key_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_InitQuoteExRequest::CopyFrom(const Request_InitQuoteExRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.InitQuoteExRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_InitQuoteExRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void Request_InitQuoteExRequest::Swap(Request_InitQuoteExRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_InitQuoteExRequest::InternalSwap(Request_InitQuoteExRequest* other) {
  using std::swap;
  att_key_id_.Swap(&other->att_key_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buf_size_, other->buf_size_);
  swap(b_pub_key_id_, other->b_pub_key_id_);
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_InitQuoteExRequest::GetTypeName() const {
  return "aesm.message.Request.InitQuoteExRequest";
}


// ===================================================================

void Request_SelectAttKeyIDRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_SelectAttKeyIDRequest::kAttKeyIdListFieldNumber;
const int Request_SelectAttKeyIDRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_SelectAttKeyIDRequest::Request_SelectAttKeyIDRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_SelectAttKeyIDRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.SelectAttKeyIDRequest)
}
Request_SelectAttKeyIDRequest::Request_SelectAttKeyIDRequest(const Request_SelectAttKeyIDRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  att_key_id_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_att_key_id_list()) {
    att_key_id_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.att_key_id_list_);
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SelectAttKeyIDRequest)
}

void Request_SelectAttKeyIDRequest::SharedCtor() {
  att_key_id_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
}

Request_SelectAttKeyIDRequest::~Request_SelectAttKeyIDRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SelectAttKeyIDRequest)
  SharedDtor();
}

void Request_SelectAttKeyIDRequest::SharedDtor() {
  att_key_id_list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request_SelectAttKeyIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_SelectAttKeyIDRequest& Request_SelectAttKeyIDRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_SelectAttKeyIDRequest.base);
  return *internal_default_instance();
}


void Request_SelectAttKeyIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.SelectAttKeyIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    att_key_id_list_.ClearNonDefaultToEmptyNoArena();
  }
  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_SelectAttKeyIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.SelectAttKeyIDRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes att_key_id_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_att_key_id_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.SelectAttKeyIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.SelectAttKeyIDRequest)
  return false;
#undef DO_
}

void Request_SelectAttKeyIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.SelectAttKeyIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes att_key_id_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->att_key_id_list(), output);
  }

  // optional uint32 timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.SelectAttKeyIDRequest)
}

size_t Request_SelectAttKeyIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.SelectAttKeyIDRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes att_key_id_list = 1;
    if (has_att_key_id_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->att_key_id_list());
    }

    // optional uint32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_SelectAttKeyIDRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_SelectAttKeyIDRequest*>(&from));
}

void Request_SelectAttKeyIDRequest::MergeFrom(const Request_SelectAttKeyIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.SelectAttKeyIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_att_key_id_list();
      att_key_id_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.att_key_id_list_);
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_SelectAttKeyIDRequest::CopyFrom(const Request_SelectAttKeyIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.SelectAttKeyIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SelectAttKeyIDRequest::IsInitialized() const {
  return true;
}

void Request_SelectAttKeyIDRequest::Swap(Request_SelectAttKeyIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_SelectAttKeyIDRequest::InternalSwap(Request_SelectAttKeyIDRequest* other) {
  using std::swap;
  att_key_id_list_.Swap(&other->att_key_id_list_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_SelectAttKeyIDRequest::GetTypeName() const {
  return "aesm.message.Request.SelectAttKeyIDRequest";
}


// ===================================================================

void Request_GetQuoteSizeExRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_GetQuoteSizeExRequest::kAttKeyIdFieldNumber;
const int Request_GetQuoteSizeExRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_GetQuoteSizeExRequest::Request_GetQuoteSizeExRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_GetQuoteSizeExRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetQuoteSizeExRequest)
}
Request_GetQuoteSizeExRequest::Request_GetQuoteSizeExRequest(const Request_GetQuoteSizeExRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  att_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_att_key_id()) {
    att_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.att_key_id_);
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetQuoteSizeExRequest)
}

void Request_GetQuoteSizeExRequest::SharedCtor() {
  att_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
}

Request_GetQuoteSizeExRequest::~Request_GetQuoteSizeExRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetQuoteSizeExRequest)
  SharedDtor();
}

void Request_GetQuoteSizeExRequest::SharedDtor() {
  att_key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request_GetQuoteSizeExRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetQuoteSizeExRequest& Request_GetQuoteSizeExRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_GetQuoteSizeExRequest.base);
  return *internal_default_instance();
}


void Request_GetQuoteSizeExRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetQuoteSizeExRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    att_key_id_.ClearNonDefaultToEmptyNoArena();
  }
  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_GetQuoteSizeExRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetQuoteSizeExRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes att_key_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_att_key_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetQuoteSizeExRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetQuoteSizeExRequest)
  return false;
#undef DO_
}

void Request_GetQuoteSizeExRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetQuoteSizeExRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes att_key_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->att_key_id(), output);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetQuoteSizeExRequest)
}

size_t Request_GetQuoteSizeExRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetQuoteSizeExRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes att_key_id = 1;
    if (has_att_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->att_key_id());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetQuoteSizeExRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_GetQuoteSizeExRequest*>(&from));
}

void Request_GetQuoteSizeExRequest::MergeFrom(const Request_GetQuoteSizeExRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetQuoteSizeExRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_att_key_id();
      att_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.att_key_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_GetQuoteSizeExRequest::CopyFrom(const Request_GetQuoteSizeExRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetQuoteSizeExRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetQuoteSizeExRequest::IsInitialized() const {
  return true;
}

void Request_GetQuoteSizeExRequest::Swap(Request_GetQuoteSizeExRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_GetQuoteSizeExRequest::InternalSwap(Request_GetQuoteSizeExRequest* other) {
  using std::swap;
  att_key_id_.Swap(&other->att_key_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_GetQuoteSizeExRequest::GetTypeName() const {
  return "aesm.message.Request.GetQuoteSizeExRequest";
}


// ===================================================================

void Request_GetQuoteExRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_GetQuoteExRequest::kReportFieldNumber;
const int Request_GetQuoteExRequest::kAttKeyIdFieldNumber;
const int Request_GetQuoteExRequest::kQeReportInfoFieldNumber;
const int Request_GetQuoteExRequest::kBufSizeFieldNumber;
const int Request_GetQuoteExRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_GetQuoteExRequest::Request_GetQuoteExRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_GetQuoteExRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetQuoteExRequest)
}
Request_GetQuoteExRequest::Request_GetQuoteExRequest(const Request_GetQuoteExRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_report()) {
    report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_);
  }
  att_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_att_key_id()) {
    att_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.att_key_id_);
  }
  qe_report_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qe_report_info()) {
    qe_report_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qe_report_info_);
  }
  ::memcpy(&buf_size_, &from.buf_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetQuoteExRequest)
}

void Request_GetQuoteExRequest::SharedCtor() {
  report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  att_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qe_report_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&buf_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
}

Request_GetQuoteExRequest::~Request_GetQuoteExRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetQuoteExRequest)
  SharedDtor();
}

void Request_GetQuoteExRequest::SharedDtor() {
  report_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  att_key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qe_report_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request_GetQuoteExRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetQuoteExRequest& Request_GetQuoteExRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_GetQuoteExRequest.base);
  return *internal_default_instance();
}


void Request_GetQuoteExRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetQuoteExRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      report_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      att_key_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      qe_report_info_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&buf_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_GetQuoteExRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetQuoteExRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes report = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes att_key_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_att_key_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes qe_report_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qe_report_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 buf_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_buf_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buf_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetQuoteExRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetQuoteExRequest)
  return false;
#undef DO_
}

void Request_GetQuoteExRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetQuoteExRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes report = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->report(), output);
  }

  // optional bytes att_key_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->att_key_id(), output);
  }

  // optional bytes qe_report_info = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->qe_report_info(), output);
  }

  // required uint32 buf_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buf_size(), output);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetQuoteExRequest)
}

size_t Request_GetQuoteExRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aesm.message.Request.GetQuoteExRequest)
  size_t total_size = 0;

  if (has_report()) {
    // required bytes report = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->report());
  }

  if (has_buf_size()) {
    // required uint32 buf_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buf_size());
  }

  return total_size;
}
size_t Request_GetQuoteExRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetQuoteExRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required bytes report = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->report());

    // required uint32 buf_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buf_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional bytes att_key_id = 2;
    if (has_att_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->att_key_id());
    }

    // optional bytes qe_report_info = 3;
    if (has_qe_report_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qe_report_info());
    }

  }
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetQuoteExRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_GetQuoteExRequest*>(&from));
}

void Request_GetQuoteExRequest::MergeFrom(const Request_GetQuoteExRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetQuoteExRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_report();
      report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_att_key_id();
      att_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.att_key_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_qe_report_info();
      qe_report_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qe_report_info_);
    }
    if (cached_has_bits & 0x00000008u) {
      buf_size_ = from.buf_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_GetQuoteExRequest::CopyFrom(const Request_GetQuoteExRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetQuoteExRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetQuoteExRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  return true;
}

void Request_GetQuoteExRequest::Swap(Request_GetQuoteExRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_GetQuoteExRequest::InternalSwap(Request_GetQuoteExRequest* other) {
  using std::swap;
  report_.Swap(&other->report_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  att_key_id_.Swap(&other->att_key_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  qe_report_info_.Swap(&other->qe_report_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buf_size_, other->buf_size_);
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_GetQuoteExRequest::GetTypeName() const {
  return "aesm.message.Request.GetQuoteExRequest";
}


// ===================================================================

void Request_GetSupportedAttKeyIDNumRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_GetSupportedAttKeyIDNumRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_GetSupportedAttKeyIDNumRequest::Request_GetSupportedAttKeyIDNumRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_GetSupportedAttKeyIDNumRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
}
Request_GetSupportedAttKeyIDNumRequest::Request_GetSupportedAttKeyIDNumRequest(const Request_GetSupportedAttKeyIDNumRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
}

void Request_GetSupportedAttKeyIDNumRequest::SharedCtor() {
  timeout_ = 0u;
}

Request_GetSupportedAttKeyIDNumRequest::~Request_GetSupportedAttKeyIDNumRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  SharedDtor();
}

void Request_GetSupportedAttKeyIDNumRequest::SharedDtor() {
}

void Request_GetSupportedAttKeyIDNumRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetSupportedAttKeyIDNumRequest& Request_GetSupportedAttKeyIDNumRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_GetSupportedAttKeyIDNumRequest.base);
  return *internal_default_instance();
}


void Request_GetSupportedAttKeyIDNumRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_GetSupportedAttKeyIDNumRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  return false;
#undef DO_
}

void Request_GetSupportedAttKeyIDNumRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
}

size_t Request_GetSupportedAttKeyIDNumRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetSupportedAttKeyIDNumRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_GetSupportedAttKeyIDNumRequest*>(&from));
}

void Request_GetSupportedAttKeyIDNumRequest::MergeFrom(const Request_GetSupportedAttKeyIDNumRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timeout()) {
    set_timeout(from.timeout());
  }
}

void Request_GetSupportedAttKeyIDNumRequest::CopyFrom(const Request_GetSupportedAttKeyIDNumRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetSupportedAttKeyIDNumRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetSupportedAttKeyIDNumRequest::IsInitialized() const {
  return true;
}

void Request_GetSupportedAttKeyIDNumRequest::Swap(Request_GetSupportedAttKeyIDNumRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_GetSupportedAttKeyIDNumRequest::InternalSwap(Request_GetSupportedAttKeyIDNumRequest* other) {
  using std::swap;
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_GetSupportedAttKeyIDNumRequest::GetTypeName() const {
  return "aesm.message.Request.GetSupportedAttKeyIDNumRequest";
}


// ===================================================================

void Request_GetSupportedAttKeyIDsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_GetSupportedAttKeyIDsRequest::kBufSizeFieldNumber;
const int Request_GetSupportedAttKeyIDsRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_GetSupportedAttKeyIDsRequest::Request_GetSupportedAttKeyIDsRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request_GetSupportedAttKeyIDsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetSupportedAttKeyIDsRequest)
}
Request_GetSupportedAttKeyIDsRequest::Request_GetSupportedAttKeyIDsRequest(const Request_GetSupportedAttKeyIDsRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buf_size_, &from.buf_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetSupportedAttKeyIDsRequest)
}

void Request_GetSupportedAttKeyIDsRequest::SharedCtor() {
  ::memset(&buf_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
}

Request_GetSupportedAttKeyIDsRequest::~Request_GetSupportedAttKeyIDsRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  SharedDtor();
}

void Request_GetSupportedAttKeyIDsRequest::SharedDtor() {
}

void Request_GetSupportedAttKeyIDsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_GetSupportedAttKeyIDsRequest& Request_GetSupportedAttKeyIDsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request_GetSupportedAttKeyIDsRequest.base);
  return *internal_default_instance();
}


void Request_GetSupportedAttKeyIDsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&buf_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&buf_size_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request_GetSupportedAttKeyIDsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 buf_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_buf_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buf_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  return false;
#undef DO_
}

void Request_GetSupportedAttKeyIDsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 buf_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buf_size(), output);
  }

  // optional uint32 timeout = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetSupportedAttKeyIDsRequest)
}

size_t Request_GetSupportedAttKeyIDsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 buf_size = 1;
  if (has_buf_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buf_size());
  }
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_GetSupportedAttKeyIDsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request_GetSupportedAttKeyIDsRequest*>(&from));
}

void Request_GetSupportedAttKeyIDsRequest::MergeFrom(const Request_GetSupportedAttKeyIDsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      buf_size_ = from.buf_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_GetSupportedAttKeyIDsRequest::CopyFrom(const Request_GetSupportedAttKeyIDsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request.GetSupportedAttKeyIDsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetSupportedAttKeyIDsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Request_GetSupportedAttKeyIDsRequest::Swap(Request_GetSupportedAttKeyIDsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_GetSupportedAttKeyIDsRequest::InternalSwap(Request_GetSupportedAttKeyIDsRequest* other) {
  using std::swap;
  swap(buf_size_, other->buf_size_);
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request_GetSupportedAttKeyIDsRequest::GetTypeName() const {
  return "aesm.message.Request.GetSupportedAttKeyIDsRequest";
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->initquotereq_ = const_cast< ::aesm::message::Request_InitQuoteRequest*>(
      ::aesm::message::Request_InitQuoteRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getquotereq_ = const_cast< ::aesm::message::Request_GetQuoteRequest*>(
      ::aesm::message::Request_GetQuoteRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getlictokenreq_ = const_cast< ::aesm::message::Request_GetLaunchTokenRequest*>(
      ::aesm::message::Request_GetLaunchTokenRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->reporterrreq_ = const_cast< ::aesm::message::Request_ReportAttestationErrorRequest*>(
      ::aesm::message::Request_ReportAttestationErrorRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getwhitelistsizereq_ = const_cast< ::aesm::message::Request_GetWhiteListSizeRequest*>(
      ::aesm::message::Request_GetWhiteListSizeRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getwhitelistreq_ = const_cast< ::aesm::message::Request_GetWhiteListRequest*>(
      ::aesm::message::Request_GetWhiteListRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->sgxgetextendedepidgroupidreq_ = const_cast< ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest*>(
      ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->sgxswitchextendedepidgroupreq_ = const_cast< ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest*>(
      ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->sgxregisterreq_ = const_cast< ::aesm::message::Request_SGXRegisterRequest*>(
      ::aesm::message::Request_SGXRegisterRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->initquoteexreq_ = const_cast< ::aesm::message::Request_InitQuoteExRequest*>(
      ::aesm::message::Request_InitQuoteExRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getquotesizeexreq_ = const_cast< ::aesm::message::Request_GetQuoteSizeExRequest*>(
      ::aesm::message::Request_GetQuoteSizeExRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getquoteexreq_ = const_cast< ::aesm::message::Request_GetQuoteExRequest*>(
      ::aesm::message::Request_GetQuoteExRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->checkupdatestatusreq_ = const_cast< ::aesm::message::Request_CheckUpdateStatusRequest*>(
      ::aesm::message::Request_CheckUpdateStatusRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->selectattkeyidreq_ = const_cast< ::aesm::message::Request_SelectAttKeyIDRequest*>(
      ::aesm::message::Request_SelectAttKeyIDRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getsupportedattkeyidnumreq_ = const_cast< ::aesm::message::Request_GetSupportedAttKeyIDNumRequest*>(
      ::aesm::message::Request_GetSupportedAttKeyIDNumRequest::internal_default_instance());
  ::aesm::message::_Request_default_instance_._instance.get_mutable()->getsupportedattkeyidsreq_ = const_cast< ::aesm::message::Request_GetSupportedAttKeyIDsRequest*>(
      ::aesm::message::Request_GetSupportedAttKeyIDsRequest::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kInitQuoteReqFieldNumber;
const int Request::kGetQuoteReqFieldNumber;
const int Request::kGetLicTokenReqFieldNumber;
const int Request::kReportErrReqFieldNumber;
const int Request::kGetWhiteListSizeReqFieldNumber;
const int Request::kGetWhiteListReqFieldNumber;
const int Request::kSgxGetExtendedEpidGroupIdReqFieldNumber;
const int Request::kSgxSwitchExtendedEpidGroupReqFieldNumber;
const int Request::kSgxRegisterReqFieldNumber;
const int Request::kInitQuoteExReqFieldNumber;
const int Request::kGetQuoteSizeExReqFieldNumber;
const int Request::kGetQuoteExReqFieldNumber;
const int Request::kCheckUpdateStatusReqFieldNumber;
const int Request::kSelectAttKeyIDReqFieldNumber;
const int Request::kGetSupportedAttKeyIDNumReqFieldNumber;
const int Request::kGetSupportedAttKeyIDsReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_initquotereq()) {
    initquotereq_ = new ::aesm::message::Request_InitQuoteRequest(*from.initquotereq_);
  } else {
    initquotereq_ = NULL;
  }
  if (from.has_getquotereq()) {
    getquotereq_ = new ::aesm::message::Request_GetQuoteRequest(*from.getquotereq_);
  } else {
    getquotereq_ = NULL;
  }
  if (from.has_getlictokenreq()) {
    getlictokenreq_ = new ::aesm::message::Request_GetLaunchTokenRequest(*from.getlictokenreq_);
  } else {
    getlictokenreq_ = NULL;
  }
  if (from.has_reporterrreq()) {
    reporterrreq_ = new ::aesm::message::Request_ReportAttestationErrorRequest(*from.reporterrreq_);
  } else {
    reporterrreq_ = NULL;
  }
  if (from.has_getwhitelistsizereq()) {
    getwhitelistsizereq_ = new ::aesm::message::Request_GetWhiteListSizeRequest(*from.getwhitelistsizereq_);
  } else {
    getwhitelistsizereq_ = NULL;
  }
  if (from.has_getwhitelistreq()) {
    getwhitelistreq_ = new ::aesm::message::Request_GetWhiteListRequest(*from.getwhitelistreq_);
  } else {
    getwhitelistreq_ = NULL;
  }
  if (from.has_sgxgetextendedepidgroupidreq()) {
    sgxgetextendedepidgroupidreq_ = new ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest(*from.sgxgetextendedepidgroupidreq_);
  } else {
    sgxgetextendedepidgroupidreq_ = NULL;
  }
  if (from.has_sgxswitchextendedepidgroupreq()) {
    sgxswitchextendedepidgroupreq_ = new ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest(*from.sgxswitchextendedepidgroupreq_);
  } else {
    sgxswitchextendedepidgroupreq_ = NULL;
  }
  if (from.has_sgxregisterreq()) {
    sgxregisterreq_ = new ::aesm::message::Request_SGXRegisterRequest(*from.sgxregisterreq_);
  } else {
    sgxregisterreq_ = NULL;
  }
  if (from.has_initquoteexreq()) {
    initquoteexreq_ = new ::aesm::message::Request_InitQuoteExRequest(*from.initquoteexreq_);
  } else {
    initquoteexreq_ = NULL;
  }
  if (from.has_getquotesizeexreq()) {
    getquotesizeexreq_ = new ::aesm::message::Request_GetQuoteSizeExRequest(*from.getquotesizeexreq_);
  } else {
    getquotesizeexreq_ = NULL;
  }
  if (from.has_getquoteexreq()) {
    getquoteexreq_ = new ::aesm::message::Request_GetQuoteExRequest(*from.getquoteexreq_);
  } else {
    getquoteexreq_ = NULL;
  }
  if (from.has_checkupdatestatusreq()) {
    checkupdatestatusreq_ = new ::aesm::message::Request_CheckUpdateStatusRequest(*from.checkupdatestatusreq_);
  } else {
    checkupdatestatusreq_ = NULL;
  }
  if (from.has_selectattkeyidreq()) {
    selectattkeyidreq_ = new ::aesm::message::Request_SelectAttKeyIDRequest(*from.selectattkeyidreq_);
  } else {
    selectattkeyidreq_ = NULL;
  }
  if (from.has_getsupportedattkeyidnumreq()) {
    getsupportedattkeyidnumreq_ = new ::aesm::message::Request_GetSupportedAttKeyIDNumRequest(*from.getsupportedattkeyidnumreq_);
  } else {
    getsupportedattkeyidnumreq_ = NULL;
  }
  if (from.has_getsupportedattkeyidsreq()) {
    getsupportedattkeyidsreq_ = new ::aesm::message::Request_GetSupportedAttKeyIDsRequest(*from.getsupportedattkeyidsreq_);
  } else {
    getsupportedattkeyidsreq_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request)
}

void Request::SharedCtor() {
  ::memset(&initquotereq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getsupportedattkeyidsreq_) -
      reinterpret_cast<char*>(&initquotereq_)) + sizeof(getsupportedattkeyidsreq_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:aesm.message.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != internal_default_instance()) delete initquotereq_;
  if (this != internal_default_instance()) delete getquotereq_;
  if (this != internal_default_instance()) delete getlictokenreq_;
  if (this != internal_default_instance()) delete reporterrreq_;
  if (this != internal_default_instance()) delete getwhitelistsizereq_;
  if (this != internal_default_instance()) delete getwhitelistreq_;
  if (this != internal_default_instance()) delete sgxgetextendedepidgroupidreq_;
  if (this != internal_default_instance()) delete sgxswitchextendedepidgroupreq_;
  if (this != internal_default_instance()) delete sgxregisterreq_;
  if (this != internal_default_instance()) delete initquoteexreq_;
  if (this != internal_default_instance()) delete getquotesizeexreq_;
  if (this != internal_default_instance()) delete getquoteexreq_;
  if (this != internal_default_instance()) delete checkupdatestatusreq_;
  if (this != internal_default_instance()) delete selectattkeyidreq_;
  if (this != internal_default_instance()) delete getsupportedattkeyidnumreq_;
  if (this != internal_default_instance()) delete getsupportedattkeyidsreq_;
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Request.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(initquotereq_ != NULL);
      initquotereq_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(getquotereq_ != NULL);
      getquotereq_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(getlictokenreq_ != NULL);
      getlictokenreq_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reporterrreq_ != NULL);
      reporterrreq_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(getwhitelistsizereq_ != NULL);
      getwhitelistsizereq_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(getwhitelistreq_ != NULL);
      getwhitelistreq_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(sgxgetextendedepidgroupidreq_ != NULL);
      sgxgetextendedepidgroupidreq_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(sgxswitchextendedepidgroupreq_ != NULL);
      sgxswitchextendedepidgroupreq_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(sgxregisterreq_ != NULL);
      sgxregisterreq_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(initquoteexreq_ != NULL);
      initquoteexreq_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(getquotesizeexreq_ != NULL);
      getquotesizeexreq_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(getquoteexreq_ != NULL);
      getquoteexreq_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(checkupdatestatusreq_ != NULL);
      checkupdatestatusreq_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(selectattkeyidreq_ != NULL);
      selectattkeyidreq_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(getsupportedattkeyidnumreq_ != NULL);
      getsupportedattkeyidnumreq_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(getsupportedattkeyidsreq_ != NULL);
      getsupportedattkeyidsreq_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initquotereq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getquotereq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getlictokenreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reporterrreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getwhitelistsizereq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getwhitelistreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sgxgetextendedepidgroupidreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sgxswitchextendedepidgroupreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sgxregisterreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.InitQuoteExRequest initQuoteExReq = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initquoteexreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.GetQuoteSizeExRequest getQuoteSizeExReq = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getquotesizeexreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.GetQuoteExRequest getQuoteExReq = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getquoteexreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.CheckUpdateStatusRequest checkUpdateStatusReq = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_checkupdatestatusreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.SelectAttKeyIDRequest selectAttKeyIDReq = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selectattkeyidreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.GetSupportedAttKeyIDNumRequest getSupportedAttKeyIDNumReq = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getsupportedattkeyidnumreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Request.GetSupportedAttKeyIDsRequest getSupportedAttKeyIDsReq = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getsupportedattkeyidsreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_initquotereq(), output);
  }

  // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_getquotereq(), output);
  }

  // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_getlictokenreq(), output);
  }

  // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_reporterrreq(), output);
  }

  // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->_internal_getwhitelistsizereq(), output);
  }

  // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->_internal_getwhitelistreq(), output);
  }

  // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->_internal_sgxgetextendedepidgroupidreq(), output);
  }

  // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->_internal_sgxswitchextendedepidgroupreq(), output);
  }

  // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->_internal_sgxregisterreq(), output);
  }

  // optional .aesm.message.Request.InitQuoteExRequest initQuoteExReq = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->_internal_initquoteexreq(), output);
  }

  // optional .aesm.message.Request.GetQuoteSizeExRequest getQuoteSizeExReq = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->_internal_getquotesizeexreq(), output);
  }

  // optional .aesm.message.Request.GetQuoteExRequest getQuoteExReq = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->_internal_getquoteexreq(), output);
  }

  // optional .aesm.message.Request.CheckUpdateStatusRequest checkUpdateStatusReq = 18;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->_internal_checkupdatestatusreq(), output);
  }

  // optional .aesm.message.Request.SelectAttKeyIDRequest selectAttKeyIDReq = 19;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->_internal_selectattkeyidreq(), output);
  }

  // optional .aesm.message.Request.GetSupportedAttKeyIDNumRequest getSupportedAttKeyIDNumReq = 21;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->_internal_getsupportedattkeyidnumreq(), output);
  }

  // optional .aesm.message.Request.GetSupportedAttKeyIDsRequest getSupportedAttKeyIDsReq = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->_internal_getsupportedattkeyidsreq(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Request)
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Request)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
    if (has_initquotereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *initquotereq_);
    }

    // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
    if (has_getquotereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getquotereq_);
    }

    // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
    if (has_getlictokenreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getlictokenreq_);
    }

    // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
    if (has_reporterrreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reporterrreq_);
    }

    // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
    if (has_getwhitelistsizereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getwhitelistsizereq_);
    }

    // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
    if (has_getwhitelistreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getwhitelistreq_);
    }

    // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
    if (has_sgxgetextendedepidgroupidreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sgxgetextendedepidgroupidreq_);
    }

    // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
    if (has_sgxswitchextendedepidgroupreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sgxswitchextendedepidgroupreq_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
    if (has_sgxregisterreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sgxregisterreq_);
    }

    // optional .aesm.message.Request.InitQuoteExRequest initQuoteExReq = 15;
    if (has_initquoteexreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *initquoteexreq_);
    }

    // optional .aesm.message.Request.GetQuoteSizeExRequest getQuoteSizeExReq = 16;
    if (has_getquotesizeexreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getquotesizeexreq_);
    }

    // optional .aesm.message.Request.GetQuoteExRequest getQuoteExReq = 17;
    if (has_getquoteexreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getquoteexreq_);
    }

    // optional .aesm.message.Request.CheckUpdateStatusRequest checkUpdateStatusReq = 18;
    if (has_checkupdatestatusreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *checkupdatestatusreq_);
    }

    // optional .aesm.message.Request.SelectAttKeyIDRequest selectAttKeyIDReq = 19;
    if (has_selectattkeyidreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *selectattkeyidreq_);
    }

    // optional .aesm.message.Request.GetSupportedAttKeyIDNumRequest getSupportedAttKeyIDNumReq = 21;
    if (has_getsupportedattkeyidnumreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getsupportedattkeyidnumreq_);
    }

    // optional .aesm.message.Request.GetSupportedAttKeyIDsRequest getSupportedAttKeyIDsReq = 22;
    if (has_getsupportedattkeyidsreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getsupportedattkeyidsreq_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request*>(&from));
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_initquotereq()->::aesm::message::Request_InitQuoteRequest::MergeFrom(from.initquotereq());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_getquotereq()->::aesm::message::Request_GetQuoteRequest::MergeFrom(from.getquotereq());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_getlictokenreq()->::aesm::message::Request_GetLaunchTokenRequest::MergeFrom(from.getlictokenreq());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_reporterrreq()->::aesm::message::Request_ReportAttestationErrorRequest::MergeFrom(from.reporterrreq());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_getwhitelistsizereq()->::aesm::message::Request_GetWhiteListSizeRequest::MergeFrom(from.getwhitelistsizereq());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_getwhitelistreq()->::aesm::message::Request_GetWhiteListRequest::MergeFrom(from.getwhitelistreq());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_sgxgetextendedepidgroupidreq()->::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest::MergeFrom(from.sgxgetextendedepidgroupidreq());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_sgxswitchextendedepidgroupreq()->::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest::MergeFrom(from.sgxswitchextendedepidgroupreq());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_sgxregisterreq()->::aesm::message::Request_SGXRegisterRequest::MergeFrom(from.sgxregisterreq());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_initquoteexreq()->::aesm::message::Request_InitQuoteExRequest::MergeFrom(from.initquoteexreq());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_getquotesizeexreq()->::aesm::message::Request_GetQuoteSizeExRequest::MergeFrom(from.getquotesizeexreq());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_getquoteexreq()->::aesm::message::Request_GetQuoteExRequest::MergeFrom(from.getquoteexreq());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_checkupdatestatusreq()->::aesm::message::Request_CheckUpdateStatusRequest::MergeFrom(from.checkupdatestatusreq());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_selectattkeyidreq()->::aesm::message::Request_SelectAttKeyIDRequest::MergeFrom(from.selectattkeyidreq());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_getsupportedattkeyidnumreq()->::aesm::message::Request_GetSupportedAttKeyIDNumRequest::MergeFrom(from.getsupportedattkeyidnumreq());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_getsupportedattkeyidsreq()->::aesm::message::Request_GetSupportedAttKeyIDsRequest::MergeFrom(from.getsupportedattkeyidsreq());
    }
  }
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if (has_getquotereq()) {
    if (!this->getquotereq_->IsInitialized()) return false;
  }
  if (has_getlictokenreq()) {
    if (!this->getlictokenreq_->IsInitialized()) return false;
  }
  if (has_reporterrreq()) {
    if (!this->reporterrreq_->IsInitialized()) return false;
  }
  if (has_sgxregisterreq()) {
    if (!this->sgxregisterreq_->IsInitialized()) return false;
  }
  if (has_initquoteexreq()) {
    if (!this->initquoteexreq_->IsInitialized()) return false;
  }
  if (has_getquoteexreq()) {
    if (!this->getquoteexreq_->IsInitialized()) return false;
  }
  if (has_checkupdatestatusreq()) {
    if (!this->checkupdatestatusreq_->IsInitialized()) return false;
  }
  if (has_getsupportedattkeyidsreq()) {
    if (!this->getsupportedattkeyidsreq_->IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  swap(initquotereq_, other->initquotereq_);
  swap(getquotereq_, other->getquotereq_);
  swap(getlictokenreq_, other->getlictokenreq_);
  swap(reporterrreq_, other->reporterrreq_);
  swap(getwhitelistsizereq_, other->getwhitelistsizereq_);
  swap(getwhitelistreq_, other->getwhitelistreq_);
  swap(sgxgetextendedepidgroupidreq_, other->sgxgetextendedepidgroupidreq_);
  swap(sgxswitchextendedepidgroupreq_, other->sgxswitchextendedepidgroupreq_);
  swap(sgxregisterreq_, other->sgxregisterreq_);
  swap(initquoteexreq_, other->initquoteexreq_);
  swap(getquotesizeexreq_, other->getquotesizeexreq_);
  swap(getquoteexreq_, other->getquoteexreq_);
  swap(checkupdatestatusreq_, other->checkupdatestatusreq_);
  swap(selectattkeyidreq_, other->selectattkeyidreq_);
  swap(getsupportedattkeyidnumreq_, other->getsupportedattkeyidnumreq_);
  swap(getsupportedattkeyidsreq_, other->getsupportedattkeyidsreq_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request::GetTypeName() const {
  return "aesm.message.Request";
}


// ===================================================================

void Response_InitQuoteResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_InitQuoteResponse::kErrorCodeFieldNumber;
const int Response_InitQuoteResponse::kTargetInfoFieldNumber;
const int Response_InitQuoteResponse::kGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_InitQuoteResponse::Response_InitQuoteResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_InitQuoteResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.InitQuoteResponse)
}
Response_InitQuoteResponse::Response_InitQuoteResponse(const Response_InitQuoteResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  targetinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetinfo()) {
    targetinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetinfo_);
  }
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gid()) {
    gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.InitQuoteResponse)
}

void Response_InitQuoteResponse::SharedCtor() {
  targetinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_InitQuoteResponse::~Response_InitQuoteResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.InitQuoteResponse)
  SharedDtor();
}

void Response_InitQuoteResponse::SharedDtor() {
  targetinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response_InitQuoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_InitQuoteResponse& Response_InitQuoteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_InitQuoteResponse.base);
  return *internal_default_instance();
}


void Response_InitQuoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.InitQuoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      targetinfo_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      gid_.ClearNonDefaultToEmptyNoArena();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_InitQuoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.InitQuoteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes targetInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_targetinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes gid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.InitQuoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.InitQuoteResponse)
  return false;
#undef DO_
}

void Response_InitQuoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.InitQuoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes targetInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->targetinfo(), output);
  }

  // optional bytes gid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->gid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.InitQuoteResponse)
}

size_t Response_InitQuoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.InitQuoteResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes targetInfo = 2;
    if (has_targetinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->targetinfo());
    }

    // optional bytes gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_InitQuoteResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_InitQuoteResponse*>(&from));
}

void Response_InitQuoteResponse::MergeFrom(const Response_InitQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.InitQuoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_targetinfo();
      targetinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_gid();
      gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
    }
    if (cached_has_bits & 0x00000004u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_InitQuoteResponse::CopyFrom(const Response_InitQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.InitQuoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_InitQuoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void Response_InitQuoteResponse::Swap(Response_InitQuoteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_InitQuoteResponse::InternalSwap(Response_InitQuoteResponse* other) {
  using std::swap;
  targetinfo_.Swap(&other->targetinfo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gid_.Swap(&other->gid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_InitQuoteResponse::GetTypeName() const {
  return "aesm.message.Response.InitQuoteResponse";
}


// ===================================================================

void Response_GetQuoteResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_GetQuoteResponse::kErrorCodeFieldNumber;
const int Response_GetQuoteResponse::kQuoteFieldNumber;
const int Response_GetQuoteResponse::kQeReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_GetQuoteResponse::Response_GetQuoteResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_GetQuoteResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetQuoteResponse)
}
Response_GetQuoteResponse::Response_GetQuoteResponse(const Response_GetQuoteResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_quote()) {
    quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
  }
  qe_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qe_report()) {
    qe_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qe_report_);
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetQuoteResponse)
}

void Response_GetQuoteResponse::SharedCtor() {
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qe_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_GetQuoteResponse::~Response_GetQuoteResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetQuoteResponse)
  SharedDtor();
}

void Response_GetQuoteResponse::SharedDtor() {
  quote_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qe_report_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response_GetQuoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetQuoteResponse& Response_GetQuoteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_GetQuoteResponse.base);
  return *internal_default_instance();
}


void Response_GetQuoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetQuoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      quote_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      qe_report_.ClearNonDefaultToEmptyNoArena();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_GetQuoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetQuoteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes quote = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes qe_report = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qe_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetQuoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetQuoteResponse)
  return false;
#undef DO_
}

void Response_GetQuoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetQuoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes quote = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->quote(), output);
  }

  // optional bytes qe_report = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->qe_report(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetQuoteResponse)
}

size_t Response_GetQuoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetQuoteResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes quote = 2;
    if (has_quote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->quote());
    }

    // optional bytes qe_report = 3;
    if (has_qe_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qe_report());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetQuoteResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_GetQuoteResponse*>(&from));
}

void Response_GetQuoteResponse::MergeFrom(const Response_GetQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetQuoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_quote();
      quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_qe_report();
      qe_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qe_report_);
    }
    if (cached_has_bits & 0x00000004u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetQuoteResponse::CopyFrom(const Response_GetQuoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetQuoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetQuoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void Response_GetQuoteResponse::Swap(Response_GetQuoteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_GetQuoteResponse::InternalSwap(Response_GetQuoteResponse* other) {
  using std::swap;
  quote_.Swap(&other->quote_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  qe_report_.Swap(&other->qe_report_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_GetQuoteResponse::GetTypeName() const {
  return "aesm.message.Response.GetQuoteResponse";
}


// ===================================================================

void Response_GetLaunchTokenResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_GetLaunchTokenResponse::kErrorCodeFieldNumber;
const int Response_GetLaunchTokenResponse::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_GetLaunchTokenResponse::Response_GetLaunchTokenResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_GetLaunchTokenResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetLaunchTokenResponse)
}
Response_GetLaunchTokenResponse::Response_GetLaunchTokenResponse(const Response_GetLaunchTokenResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetLaunchTokenResponse)
}

void Response_GetLaunchTokenResponse::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_GetLaunchTokenResponse::~Response_GetLaunchTokenResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetLaunchTokenResponse)
  SharedDtor();
}

void Response_GetLaunchTokenResponse::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response_GetLaunchTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetLaunchTokenResponse& Response_GetLaunchTokenResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_GetLaunchTokenResponse.base);
  return *internal_default_instance();
}


void Response_GetLaunchTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetLaunchTokenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmptyNoArena();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_GetLaunchTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetLaunchTokenResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetLaunchTokenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetLaunchTokenResponse)
  return false;
#undef DO_
}

void Response_GetLaunchTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetLaunchTokenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->token(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetLaunchTokenResponse)
}

size_t Response_GetLaunchTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetLaunchTokenResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional bytes token = 2;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetLaunchTokenResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_GetLaunchTokenResponse*>(&from));
}

void Response_GetLaunchTokenResponse::MergeFrom(const Response_GetLaunchTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetLaunchTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetLaunchTokenResponse::CopyFrom(const Response_GetLaunchTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetLaunchTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetLaunchTokenResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Response_GetLaunchTokenResponse::Swap(Response_GetLaunchTokenResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_GetLaunchTokenResponse::InternalSwap(Response_GetLaunchTokenResponse* other) {
  using std::swap;
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_GetLaunchTokenResponse::GetTypeName() const {
  return "aesm.message.Response.GetLaunchTokenResponse";
}


// ===================================================================

void Response_ReportAttestationErrorResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_ReportAttestationErrorResponse::kErrorCodeFieldNumber;
const int Response_ReportAttestationErrorResponse::kPlatformUpdateInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_ReportAttestationErrorResponse::Response_ReportAttestationErrorResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_ReportAttestationErrorResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.ReportAttestationErrorResponse)
}
Response_ReportAttestationErrorResponse::Response_ReportAttestationErrorResponse(const Response_ReportAttestationErrorResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  platform_update_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform_update_info()) {
    platform_update_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_update_info_);
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.ReportAttestationErrorResponse)
}

void Response_ReportAttestationErrorResponse::SharedCtor() {
  platform_update_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_ReportAttestationErrorResponse::~Response_ReportAttestationErrorResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.ReportAttestationErrorResponse)
  SharedDtor();
}

void Response_ReportAttestationErrorResponse::SharedDtor() {
  platform_update_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response_ReportAttestationErrorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_ReportAttestationErrorResponse& Response_ReportAttestationErrorResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_ReportAttestationErrorResponse.base);
  return *internal_default_instance();
}


void Response_ReportAttestationErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.ReportAttestationErrorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      platform_update_info_.ClearNonDefaultToEmptyNoArena();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_ReportAttestationErrorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.ReportAttestationErrorResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes platform_update_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_update_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.ReportAttestationErrorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.ReportAttestationErrorResponse)
  return false;
#undef DO_
}

void Response_ReportAttestationErrorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.ReportAttestationErrorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes platform_update_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->platform_update_info(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.ReportAttestationErrorResponse)
}

size_t Response_ReportAttestationErrorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.ReportAttestationErrorResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional bytes platform_update_info = 2;
  if (has_platform_update_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->platform_update_info());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_ReportAttestationErrorResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_ReportAttestationErrorResponse*>(&from));
}

void Response_ReportAttestationErrorResponse::MergeFrom(const Response_ReportAttestationErrorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.ReportAttestationErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_platform_update_info();
      platform_update_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_update_info_);
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_ReportAttestationErrorResponse::CopyFrom(const Response_ReportAttestationErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.ReportAttestationErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_ReportAttestationErrorResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Response_ReportAttestationErrorResponse::Swap(Response_ReportAttestationErrorResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_ReportAttestationErrorResponse::InternalSwap(Response_ReportAttestationErrorResponse* other) {
  using std::swap;
  platform_update_info_.Swap(&other->platform_update_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_ReportAttestationErrorResponse::GetTypeName() const {
  return "aesm.message.Response.ReportAttestationErrorResponse";
}


// ===================================================================

void Response_CheckUpdateStatusResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_CheckUpdateStatusResponse::kErrorCodeFieldNumber;
const int Response_CheckUpdateStatusResponse::kPlatformUpdateInfoFieldNumber;
const int Response_CheckUpdateStatusResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_CheckUpdateStatusResponse::Response_CheckUpdateStatusResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_CheckUpdateStatusResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.CheckUpdateStatusResponse)
}
Response_CheckUpdateStatusResponse::Response_CheckUpdateStatusResponse(const Response_CheckUpdateStatusResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  platform_update_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform_update_info()) {
    platform_update_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_update_info_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&status_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.CheckUpdateStatusResponse)
}

void Response_CheckUpdateStatusResponse::SharedCtor() {
  platform_update_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  errorcode_ = 1u;
}

Response_CheckUpdateStatusResponse::~Response_CheckUpdateStatusResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.CheckUpdateStatusResponse)
  SharedDtor();
}

void Response_CheckUpdateStatusResponse::SharedDtor() {
  platform_update_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response_CheckUpdateStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_CheckUpdateStatusResponse& Response_CheckUpdateStatusResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_CheckUpdateStatusResponse.base);
  return *internal_default_instance();
}


void Response_CheckUpdateStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.CheckUpdateStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    platform_update_info_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    status_ = 0u;
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_CheckUpdateStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.CheckUpdateStatusResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes platform_update_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_update_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.CheckUpdateStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.CheckUpdateStatusResponse)
  return false;
#undef DO_
}

void Response_CheckUpdateStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.CheckUpdateStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes platform_update_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->platform_update_info(), output);
  }

  // optional uint32 status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.CheckUpdateStatusResponse)
}

size_t Response_CheckUpdateStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.CheckUpdateStatusResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes platform_update_info = 2;
    if (has_platform_update_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_update_info());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_CheckUpdateStatusResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_CheckUpdateStatusResponse*>(&from));
}

void Response_CheckUpdateStatusResponse::MergeFrom(const Response_CheckUpdateStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.CheckUpdateStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_platform_update_info();
      platform_update_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_update_info_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_CheckUpdateStatusResponse::CopyFrom(const Response_CheckUpdateStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.CheckUpdateStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_CheckUpdateStatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void Response_CheckUpdateStatusResponse::Swap(Response_CheckUpdateStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_CheckUpdateStatusResponse::InternalSwap(Response_CheckUpdateStatusResponse* other) {
  using std::swap;
  platform_update_info_.Swap(&other->platform_update_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_CheckUpdateStatusResponse::GetTypeName() const {
  return "aesm.message.Response.CheckUpdateStatusResponse";
}


// ===================================================================

void Response_GetWhiteListSizeResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_GetWhiteListSizeResponse::kErrorCodeFieldNumber;
const int Response_GetWhiteListSizeResponse::kWhiteListSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_GetWhiteListSizeResponse::Response_GetWhiteListSizeResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_GetWhiteListSizeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetWhiteListSizeResponse)
}
Response_GetWhiteListSizeResponse::Response_GetWhiteListSizeResponse(const Response_GetWhiteListSizeResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&white_list_size_, &from.white_list_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&white_list_size_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetWhiteListSizeResponse)
}

void Response_GetWhiteListSizeResponse::SharedCtor() {
  white_list_size_ = 0u;
  errorcode_ = 1u;
}

Response_GetWhiteListSizeResponse::~Response_GetWhiteListSizeResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetWhiteListSizeResponse)
  SharedDtor();
}

void Response_GetWhiteListSizeResponse::SharedDtor() {
}

void Response_GetWhiteListSizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetWhiteListSizeResponse& Response_GetWhiteListSizeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_GetWhiteListSizeResponse.base);
  return *internal_default_instance();
}


void Response_GetWhiteListSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetWhiteListSizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    white_list_size_ = 0u;
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_GetWhiteListSizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetWhiteListSizeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 white_list_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_white_list_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &white_list_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetWhiteListSizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetWhiteListSizeResponse)
  return false;
#undef DO_
}

void Response_GetWhiteListSizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetWhiteListSizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional uint32 white_list_size = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->white_list_size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetWhiteListSizeResponse)
}

size_t Response_GetWhiteListSizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetWhiteListSizeResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional uint32 white_list_size = 2;
  if (has_white_list_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->white_list_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetWhiteListSizeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_GetWhiteListSizeResponse*>(&from));
}

void Response_GetWhiteListSizeResponse::MergeFrom(const Response_GetWhiteListSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetWhiteListSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      white_list_size_ = from.white_list_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetWhiteListSizeResponse::CopyFrom(const Response_GetWhiteListSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetWhiteListSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetWhiteListSizeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Response_GetWhiteListSizeResponse::Swap(Response_GetWhiteListSizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_GetWhiteListSizeResponse::InternalSwap(Response_GetWhiteListSizeResponse* other) {
  using std::swap;
  swap(white_list_size_, other->white_list_size_);
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_GetWhiteListSizeResponse::GetTypeName() const {
  return "aesm.message.Response.GetWhiteListSizeResponse";
}


// ===================================================================

void Response_GetWhiteListResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_GetWhiteListResponse::kErrorCodeFieldNumber;
const int Response_GetWhiteListResponse::kWhiteListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_GetWhiteListResponse::Response_GetWhiteListResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_GetWhiteListResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetWhiteListResponse)
}
Response_GetWhiteListResponse::Response_GetWhiteListResponse(const Response_GetWhiteListResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  white_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_white_list()) {
    white_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.white_list_);
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetWhiteListResponse)
}

void Response_GetWhiteListResponse::SharedCtor() {
  white_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_GetWhiteListResponse::~Response_GetWhiteListResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetWhiteListResponse)
  SharedDtor();
}

void Response_GetWhiteListResponse::SharedDtor() {
  white_list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response_GetWhiteListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetWhiteListResponse& Response_GetWhiteListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_GetWhiteListResponse.base);
  return *internal_default_instance();
}


void Response_GetWhiteListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetWhiteListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      white_list_.ClearNonDefaultToEmptyNoArena();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_GetWhiteListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetWhiteListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes white_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_white_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetWhiteListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetWhiteListResponse)
  return false;
#undef DO_
}

void Response_GetWhiteListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetWhiteListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes white_list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->white_list(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetWhiteListResponse)
}

size_t Response_GetWhiteListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetWhiteListResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional bytes white_list = 2;
  if (has_white_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->white_list());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetWhiteListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_GetWhiteListResponse*>(&from));
}

void Response_GetWhiteListResponse::MergeFrom(const Response_GetWhiteListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetWhiteListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_white_list();
      white_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.white_list_);
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetWhiteListResponse::CopyFrom(const Response_GetWhiteListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetWhiteListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetWhiteListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Response_GetWhiteListResponse::Swap(Response_GetWhiteListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_GetWhiteListResponse::InternalSwap(Response_GetWhiteListResponse* other) {
  using std::swap;
  white_list_.Swap(&other->white_list_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_GetWhiteListResponse::GetTypeName() const {
  return "aesm.message.Response.GetWhiteListResponse";
}


// ===================================================================

void Response_SGXGetExtendedEpidGroupIdResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_SGXGetExtendedEpidGroupIdResponse::kErrorCodeFieldNumber;
const int Response_SGXGetExtendedEpidGroupIdResponse::kXGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_SGXGetExtendedEpidGroupIdResponse::Response_SGXGetExtendedEpidGroupIdResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_SGXGetExtendedEpidGroupIdResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
}
Response_SGXGetExtendedEpidGroupIdResponse::Response_SGXGetExtendedEpidGroupIdResponse(const Response_SGXGetExtendedEpidGroupIdResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_group_id_, &from.x_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&x_group_id_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
}

void Response_SGXGetExtendedEpidGroupIdResponse::SharedCtor() {
  x_group_id_ = 0u;
  errorcode_ = 1u;
}

Response_SGXGetExtendedEpidGroupIdResponse::~Response_SGXGetExtendedEpidGroupIdResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  SharedDtor();
}

void Response_SGXGetExtendedEpidGroupIdResponse::SharedDtor() {
}

void Response_SGXGetExtendedEpidGroupIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_SGXGetExtendedEpidGroupIdResponse& Response_SGXGetExtendedEpidGroupIdResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_SGXGetExtendedEpidGroupIdResponse.base);
  return *internal_default_instance();
}


void Response_SGXGetExtendedEpidGroupIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    x_group_id_ = 0u;
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_SGXGetExtendedEpidGroupIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x_group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_x_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  return false;
#undef DO_
}

void Response_SGXGetExtendedEpidGroupIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional uint32 x_group_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x_group_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
}

size_t Response_SGXGetExtendedEpidGroupIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional uint32 x_group_id = 2;
  if (has_x_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x_group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_SGXGetExtendedEpidGroupIdResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_SGXGetExtendedEpidGroupIdResponse*>(&from));
}

void Response_SGXGetExtendedEpidGroupIdResponse::MergeFrom(const Response_SGXGetExtendedEpidGroupIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_group_id_ = from.x_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_SGXGetExtendedEpidGroupIdResponse::CopyFrom(const Response_SGXGetExtendedEpidGroupIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SGXGetExtendedEpidGroupIdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Response_SGXGetExtendedEpidGroupIdResponse::Swap(Response_SGXGetExtendedEpidGroupIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_SGXGetExtendedEpidGroupIdResponse::InternalSwap(Response_SGXGetExtendedEpidGroupIdResponse* other) {
  using std::swap;
  swap(x_group_id_, other->x_group_id_);
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_SGXGetExtendedEpidGroupIdResponse::GetTypeName() const {
  return "aesm.message.Response.SGXGetExtendedEpidGroupIdResponse";
}


// ===================================================================

void Response_SGXSwitchExtendedEpidGroupResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_SGXSwitchExtendedEpidGroupResponse::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_SGXSwitchExtendedEpidGroupResponse::Response_SGXSwitchExtendedEpidGroupResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_SGXSwitchExtendedEpidGroupResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
}
Response_SGXSwitchExtendedEpidGroupResponse::Response_SGXSwitchExtendedEpidGroupResponse(const Response_SGXSwitchExtendedEpidGroupResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
}

void Response_SGXSwitchExtendedEpidGroupResponse::SharedCtor() {
  errorcode_ = 1u;
}

Response_SGXSwitchExtendedEpidGroupResponse::~Response_SGXSwitchExtendedEpidGroupResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  SharedDtor();
}

void Response_SGXSwitchExtendedEpidGroupResponse::SharedDtor() {
}

void Response_SGXSwitchExtendedEpidGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_SGXSwitchExtendedEpidGroupResponse& Response_SGXSwitchExtendedEpidGroupResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_SGXSwitchExtendedEpidGroupResponse.base);
  return *internal_default_instance();
}


void Response_SGXSwitchExtendedEpidGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcode_ = 1u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_SGXSwitchExtendedEpidGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  return false;
#undef DO_
}

void Response_SGXSwitchExtendedEpidGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
}

size_t Response_SGXSwitchExtendedEpidGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_SGXSwitchExtendedEpidGroupResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_SGXSwitchExtendedEpidGroupResponse*>(&from));
}

void Response_SGXSwitchExtendedEpidGroupResponse::MergeFrom(const Response_SGXSwitchExtendedEpidGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errorcode()) {
    set_errorcode(from.errorcode());
  }
}

void Response_SGXSwitchExtendedEpidGroupResponse::CopyFrom(const Response_SGXSwitchExtendedEpidGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SGXSwitchExtendedEpidGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Response_SGXSwitchExtendedEpidGroupResponse::Swap(Response_SGXSwitchExtendedEpidGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_SGXSwitchExtendedEpidGroupResponse::InternalSwap(Response_SGXSwitchExtendedEpidGroupResponse* other) {
  using std::swap;
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_SGXSwitchExtendedEpidGroupResponse::GetTypeName() const {
  return "aesm.message.Response.SGXSwitchExtendedEpidGroupResponse";
}


// ===================================================================

void Response_SGXRegisterResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_SGXRegisterResponse::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_SGXRegisterResponse::Response_SGXRegisterResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_SGXRegisterResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.SGXRegisterResponse)
}
Response_SGXRegisterResponse::Response_SGXRegisterResponse(const Response_SGXRegisterResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SGXRegisterResponse)
}

void Response_SGXRegisterResponse::SharedCtor() {
  errorcode_ = 1u;
}

Response_SGXRegisterResponse::~Response_SGXRegisterResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SGXRegisterResponse)
  SharedDtor();
}

void Response_SGXRegisterResponse::SharedDtor() {
}

void Response_SGXRegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_SGXRegisterResponse& Response_SGXRegisterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_SGXRegisterResponse.base);
  return *internal_default_instance();
}


void Response_SGXRegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.SGXRegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcode_ = 1u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_SGXRegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.SGXRegisterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.SGXRegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.SGXRegisterResponse)
  return false;
#undef DO_
}

void Response_SGXRegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.SGXRegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.SGXRegisterResponse)
}

size_t Response_SGXRegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.SGXRegisterResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_SGXRegisterResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_SGXRegisterResponse*>(&from));
}

void Response_SGXRegisterResponse::MergeFrom(const Response_SGXRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.SGXRegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errorcode()) {
    set_errorcode(from.errorcode());
  }
}

void Response_SGXRegisterResponse::CopyFrom(const Response_SGXRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.SGXRegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SGXRegisterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Response_SGXRegisterResponse::Swap(Response_SGXRegisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_SGXRegisterResponse::InternalSwap(Response_SGXRegisterResponse* other) {
  using std::swap;
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_SGXRegisterResponse::GetTypeName() const {
  return "aesm.message.Response.SGXRegisterResponse";
}


// ===================================================================

void Response_SelectAttKeyIDResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_SelectAttKeyIDResponse::kErrorCodeFieldNumber;
const int Response_SelectAttKeyIDResponse::kSelectedAttKeyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_SelectAttKeyIDResponse::Response_SelectAttKeyIDResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_SelectAttKeyIDResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.SelectAttKeyIDResponse)
}
Response_SelectAttKeyIDResponse::Response_SelectAttKeyIDResponse(const Response_SelectAttKeyIDResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  selected_att_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_selected_att_key_id()) {
    selected_att_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selected_att_key_id_);
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SelectAttKeyIDResponse)
}

void Response_SelectAttKeyIDResponse::SharedCtor() {
  selected_att_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_SelectAttKeyIDResponse::~Response_SelectAttKeyIDResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SelectAttKeyIDResponse)
  SharedDtor();
}

void Response_SelectAttKeyIDResponse::SharedDtor() {
  selected_att_key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response_SelectAttKeyIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_SelectAttKeyIDResponse& Response_SelectAttKeyIDResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_SelectAttKeyIDResponse.base);
  return *internal_default_instance();
}


void Response_SelectAttKeyIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.SelectAttKeyIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      selected_att_key_id_.ClearNonDefaultToEmptyNoArena();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_SelectAttKeyIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.SelectAttKeyIDResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes selected_att_key_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_selected_att_key_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.SelectAttKeyIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.SelectAttKeyIDResponse)
  return false;
#undef DO_
}

void Response_SelectAttKeyIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.SelectAttKeyIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes selected_att_key_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->selected_att_key_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.SelectAttKeyIDResponse)
}

size_t Response_SelectAttKeyIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.SelectAttKeyIDResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional bytes selected_att_key_id = 2;
  if (has_selected_att_key_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->selected_att_key_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_SelectAttKeyIDResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_SelectAttKeyIDResponse*>(&from));
}

void Response_SelectAttKeyIDResponse::MergeFrom(const Response_SelectAttKeyIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.SelectAttKeyIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_selected_att_key_id();
      selected_att_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selected_att_key_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_SelectAttKeyIDResponse::CopyFrom(const Response_SelectAttKeyIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.SelectAttKeyIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SelectAttKeyIDResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Response_SelectAttKeyIDResponse::Swap(Response_SelectAttKeyIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_SelectAttKeyIDResponse::InternalSwap(Response_SelectAttKeyIDResponse* other) {
  using std::swap;
  selected_att_key_id_.Swap(&other->selected_att_key_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_SelectAttKeyIDResponse::GetTypeName() const {
  return "aesm.message.Response.SelectAttKeyIDResponse";
}


// ===================================================================

void Response_InitQuoteExResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_InitQuoteExResponse::kErrorCodeFieldNumber;
const int Response_InitQuoteExResponse::kTargetInfoFieldNumber;
const int Response_InitQuoteExResponse::kPubKeyIdSizeFieldNumber;
const int Response_InitQuoteExResponse::kPubKeyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_InitQuoteExResponse::Response_InitQuoteExResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_InitQuoteExResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.InitQuoteExResponse)
}
Response_InitQuoteExResponse::Response_InitQuoteExResponse(const Response_InitQuoteExResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_info()) {
    target_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_info_);
  }
  pub_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pub_key_id()) {
    pub_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_key_id_);
  }
  ::memcpy(&pub_key_id_size_, &from.pub_key_id_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&pub_key_id_size_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.InitQuoteExResponse)
}

void Response_InitQuoteExResponse::SharedCtor() {
  target_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pub_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pub_key_id_size_ = GOOGLE_ULONGLONG(0);
  errorcode_ = 1u;
}

Response_InitQuoteExResponse::~Response_InitQuoteExResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.InitQuoteExResponse)
  SharedDtor();
}

void Response_InitQuoteExResponse::SharedDtor() {
  target_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pub_key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response_InitQuoteExResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_InitQuoteExResponse& Response_InitQuoteExResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_InitQuoteExResponse.base);
  return *internal_default_instance();
}


void Response_InitQuoteExResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.InitQuoteExResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      target_info_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pub_key_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    pub_key_id_size_ = GOOGLE_ULONGLONG(0);
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_InitQuoteExResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.InitQuoteExResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes target_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pub_key_id_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pub_key_id_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pub_key_id_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pub_key_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pub_key_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.InitQuoteExResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.InitQuoteExResponse)
  return false;
#undef DO_
}

void Response_InitQuoteExResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.InitQuoteExResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes target_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->target_info(), output);
  }

  // optional uint64 pub_key_id_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pub_key_id_size(), output);
  }

  // optional bytes pub_key_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pub_key_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.InitQuoteExResponse)
}

size_t Response_InitQuoteExResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.InitQuoteExResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes target_info = 2;
    if (has_target_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target_info());
    }

    // optional bytes pub_key_id = 4;
    if (has_pub_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pub_key_id());
    }

    // optional uint64 pub_key_id_size = 3;
    if (has_pub_key_id_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pub_key_id_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_InitQuoteExResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_InitQuoteExResponse*>(&from));
}

void Response_InitQuoteExResponse::MergeFrom(const Response_InitQuoteExResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.InitQuoteExResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_target_info();
      target_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_info_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pub_key_id();
      pub_key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_key_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      pub_key_id_size_ = from.pub_key_id_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_InitQuoteExResponse::CopyFrom(const Response_InitQuoteExResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.InitQuoteExResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_InitQuoteExResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void Response_InitQuoteExResponse::Swap(Response_InitQuoteExResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_InitQuoteExResponse::InternalSwap(Response_InitQuoteExResponse* other) {
  using std::swap;
  target_info_.Swap(&other->target_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pub_key_id_.Swap(&other->pub_key_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pub_key_id_size_, other->pub_key_id_size_);
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_InitQuoteExResponse::GetTypeName() const {
  return "aesm.message.Response.InitQuoteExResponse";
}


// ===================================================================

void Response_GetQuoteSizeExResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_GetQuoteSizeExResponse::kErrorCodeFieldNumber;
const int Response_GetQuoteSizeExResponse::kQuoteSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_GetQuoteSizeExResponse::Response_GetQuoteSizeExResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_GetQuoteSizeExResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetQuoteSizeExResponse)
}
Response_GetQuoteSizeExResponse::Response_GetQuoteSizeExResponse(const Response_GetQuoteSizeExResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&quote_size_, &from.quote_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&quote_size_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetQuoteSizeExResponse)
}

void Response_GetQuoteSizeExResponse::SharedCtor() {
  quote_size_ = 0u;
  errorcode_ = 1u;
}

Response_GetQuoteSizeExResponse::~Response_GetQuoteSizeExResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetQuoteSizeExResponse)
  SharedDtor();
}

void Response_GetQuoteSizeExResponse::SharedDtor() {
}

void Response_GetQuoteSizeExResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetQuoteSizeExResponse& Response_GetQuoteSizeExResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_GetQuoteSizeExResponse.base);
  return *internal_default_instance();
}


void Response_GetQuoteSizeExResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetQuoteSizeExResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    quote_size_ = 0u;
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_GetQuoteSizeExResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetQuoteSizeExResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quote_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_quote_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quote_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetQuoteSizeExResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetQuoteSizeExResponse)
  return false;
#undef DO_
}

void Response_GetQuoteSizeExResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetQuoteSizeExResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional uint32 quote_size = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quote_size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetQuoteSizeExResponse)
}

size_t Response_GetQuoteSizeExResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetQuoteSizeExResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional uint32 quote_size = 2;
  if (has_quote_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quote_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetQuoteSizeExResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_GetQuoteSizeExResponse*>(&from));
}

void Response_GetQuoteSizeExResponse::MergeFrom(const Response_GetQuoteSizeExResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetQuoteSizeExResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      quote_size_ = from.quote_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetQuoteSizeExResponse::CopyFrom(const Response_GetQuoteSizeExResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetQuoteSizeExResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetQuoteSizeExResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Response_GetQuoteSizeExResponse::Swap(Response_GetQuoteSizeExResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_GetQuoteSizeExResponse::InternalSwap(Response_GetQuoteSizeExResponse* other) {
  using std::swap;
  swap(quote_size_, other->quote_size_);
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_GetQuoteSizeExResponse::GetTypeName() const {
  return "aesm.message.Response.GetQuoteSizeExResponse";
}


// ===================================================================

void Response_GetQuoteExResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_GetQuoteExResponse::kErrorCodeFieldNumber;
const int Response_GetQuoteExResponse::kQuoteFieldNumber;
const int Response_GetQuoteExResponse::kQeReportInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_GetQuoteExResponse::Response_GetQuoteExResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_GetQuoteExResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetQuoteExResponse)
}
Response_GetQuoteExResponse::Response_GetQuoteExResponse(const Response_GetQuoteExResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_quote()) {
    quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
  }
  qe_report_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qe_report_info()) {
    qe_report_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qe_report_info_);
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetQuoteExResponse)
}

void Response_GetQuoteExResponse::SharedCtor() {
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qe_report_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_GetQuoteExResponse::~Response_GetQuoteExResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetQuoteExResponse)
  SharedDtor();
}

void Response_GetQuoteExResponse::SharedDtor() {
  quote_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qe_report_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response_GetQuoteExResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetQuoteExResponse& Response_GetQuoteExResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_GetQuoteExResponse.base);
  return *internal_default_instance();
}


void Response_GetQuoteExResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetQuoteExResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      quote_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      qe_report_info_.ClearNonDefaultToEmptyNoArena();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_GetQuoteExResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetQuoteExResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes quote = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes qe_report_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qe_report_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetQuoteExResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetQuoteExResponse)
  return false;
#undef DO_
}

void Response_GetQuoteExResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetQuoteExResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes quote = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->quote(), output);
  }

  // optional bytes qe_report_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->qe_report_info(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetQuoteExResponse)
}

size_t Response_GetQuoteExResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetQuoteExResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes quote = 2;
    if (has_quote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->quote());
    }

    // optional bytes qe_report_info = 3;
    if (has_qe_report_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qe_report_info());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetQuoteExResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_GetQuoteExResponse*>(&from));
}

void Response_GetQuoteExResponse::MergeFrom(const Response_GetQuoteExResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetQuoteExResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_quote();
      quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_qe_report_info();
      qe_report_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qe_report_info_);
    }
    if (cached_has_bits & 0x00000004u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetQuoteExResponse::CopyFrom(const Response_GetQuoteExResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetQuoteExResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetQuoteExResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void Response_GetQuoteExResponse::Swap(Response_GetQuoteExResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_GetQuoteExResponse::InternalSwap(Response_GetQuoteExResponse* other) {
  using std::swap;
  quote_.Swap(&other->quote_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  qe_report_info_.Swap(&other->qe_report_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_GetQuoteExResponse::GetTypeName() const {
  return "aesm.message.Response.GetQuoteExResponse";
}


// ===================================================================

void Response_UnsupportedRequestResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_UnsupportedRequestResponse::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_UnsupportedRequestResponse::Response_UnsupportedRequestResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_UnsupportedRequestResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.UnsupportedRequestResponse)
}
Response_UnsupportedRequestResponse::Response_UnsupportedRequestResponse(const Response_UnsupportedRequestResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.UnsupportedRequestResponse)
}

void Response_UnsupportedRequestResponse::SharedCtor() {
  errorcode_ = 1u;
}

Response_UnsupportedRequestResponse::~Response_UnsupportedRequestResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.UnsupportedRequestResponse)
  SharedDtor();
}

void Response_UnsupportedRequestResponse::SharedDtor() {
}

void Response_UnsupportedRequestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_UnsupportedRequestResponse& Response_UnsupportedRequestResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_UnsupportedRequestResponse.base);
  return *internal_default_instance();
}


void Response_UnsupportedRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.UnsupportedRequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcode_ = 1u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_UnsupportedRequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.UnsupportedRequestResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.UnsupportedRequestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.UnsupportedRequestResponse)
  return false;
#undef DO_
}

void Response_UnsupportedRequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.UnsupportedRequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.UnsupportedRequestResponse)
}

size_t Response_UnsupportedRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.UnsupportedRequestResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_UnsupportedRequestResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_UnsupportedRequestResponse*>(&from));
}

void Response_UnsupportedRequestResponse::MergeFrom(const Response_UnsupportedRequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.UnsupportedRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errorcode()) {
    set_errorcode(from.errorcode());
  }
}

void Response_UnsupportedRequestResponse::CopyFrom(const Response_UnsupportedRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.UnsupportedRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_UnsupportedRequestResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Response_UnsupportedRequestResponse::Swap(Response_UnsupportedRequestResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_UnsupportedRequestResponse::InternalSwap(Response_UnsupportedRequestResponse* other) {
  using std::swap;
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_UnsupportedRequestResponse::GetTypeName() const {
  return "aesm.message.Response.UnsupportedRequestResponse";
}


// ===================================================================

void Response_GetSupportedAttKeyIDNumResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_GetSupportedAttKeyIDNumResponse::kErrorCodeFieldNumber;
const int Response_GetSupportedAttKeyIDNumResponse::kAttKeyIdNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_GetSupportedAttKeyIDNumResponse::Response_GetSupportedAttKeyIDNumResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_GetSupportedAttKeyIDNumResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
}
Response_GetSupportedAttKeyIDNumResponse::Response_GetSupportedAttKeyIDNumResponse(const Response_GetSupportedAttKeyIDNumResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&att_key_id_num_, &from.att_key_id_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&att_key_id_num_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
}

void Response_GetSupportedAttKeyIDNumResponse::SharedCtor() {
  att_key_id_num_ = 0u;
  errorcode_ = 1u;
}

Response_GetSupportedAttKeyIDNumResponse::~Response_GetSupportedAttKeyIDNumResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  SharedDtor();
}

void Response_GetSupportedAttKeyIDNumResponse::SharedDtor() {
}

void Response_GetSupportedAttKeyIDNumResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetSupportedAttKeyIDNumResponse& Response_GetSupportedAttKeyIDNumResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_GetSupportedAttKeyIDNumResponse.base);
  return *internal_default_instance();
}


void Response_GetSupportedAttKeyIDNumResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    att_key_id_num_ = 0u;
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_GetSupportedAttKeyIDNumResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 att_key_id_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_att_key_id_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &att_key_id_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  return false;
#undef DO_
}

void Response_GetSupportedAttKeyIDNumResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional uint32 att_key_id_num = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->att_key_id_num(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
}

size_t Response_GetSupportedAttKeyIDNumResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional uint32 att_key_id_num = 2;
  if (has_att_key_id_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->att_key_id_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetSupportedAttKeyIDNumResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_GetSupportedAttKeyIDNumResponse*>(&from));
}

void Response_GetSupportedAttKeyIDNumResponse::MergeFrom(const Response_GetSupportedAttKeyIDNumResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      att_key_id_num_ = from.att_key_id_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetSupportedAttKeyIDNumResponse::CopyFrom(const Response_GetSupportedAttKeyIDNumResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetSupportedAttKeyIDNumResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetSupportedAttKeyIDNumResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Response_GetSupportedAttKeyIDNumResponse::Swap(Response_GetSupportedAttKeyIDNumResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_GetSupportedAttKeyIDNumResponse::InternalSwap(Response_GetSupportedAttKeyIDNumResponse* other) {
  using std::swap;
  swap(att_key_id_num_, other->att_key_id_num_);
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_GetSupportedAttKeyIDNumResponse::GetTypeName() const {
  return "aesm.message.Response.GetSupportedAttKeyIDNumResponse";
}


// ===================================================================

void Response_GetSupportedAttKeyIDsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_GetSupportedAttKeyIDsResponse::kErrorCodeFieldNumber;
const int Response_GetSupportedAttKeyIDsResponse::kAttKeyIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_GetSupportedAttKeyIDsResponse::Response_GetSupportedAttKeyIDsResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response_GetSupportedAttKeyIDsResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetSupportedAttKeyIDsResponse)
}
Response_GetSupportedAttKeyIDsResponse::Response_GetSupportedAttKeyIDsResponse(const Response_GetSupportedAttKeyIDsResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  att_key_ids_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_att_key_ids()) {
    att_key_ids_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.att_key_ids_);
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetSupportedAttKeyIDsResponse)
}

void Response_GetSupportedAttKeyIDsResponse::SharedCtor() {
  att_key_ids_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 1u;
}

Response_GetSupportedAttKeyIDsResponse::~Response_GetSupportedAttKeyIDsResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  SharedDtor();
}

void Response_GetSupportedAttKeyIDsResponse::SharedDtor() {
  att_key_ids_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response_GetSupportedAttKeyIDsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_GetSupportedAttKeyIDsResponse& Response_GetSupportedAttKeyIDsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response_GetSupportedAttKeyIDsResponse.base);
  return *internal_default_instance();
}


void Response_GetSupportedAttKeyIDsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      att_key_ids_.ClearNonDefaultToEmptyNoArena();
    }
    errorcode_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response_GetSupportedAttKeyIDsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes att_key_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_att_key_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  return false;
#undef DO_
}

void Response_GetSupportedAttKeyIDsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errorCode = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes att_key_ids = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->att_key_ids(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetSupportedAttKeyIDsResponse)
}

size_t Response_GetSupportedAttKeyIDsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }
  // optional bytes att_key_ids = 2;
  if (has_att_key_ids()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->att_key_ids());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_GetSupportedAttKeyIDsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response_GetSupportedAttKeyIDsResponse*>(&from));
}

void Response_GetSupportedAttKeyIDsResponse::MergeFrom(const Response_GetSupportedAttKeyIDsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_att_key_ids();
      att_key_ids_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.att_key_ids_);
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_GetSupportedAttKeyIDsResponse::CopyFrom(const Response_GetSupportedAttKeyIDsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response.GetSupportedAttKeyIDsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetSupportedAttKeyIDsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Response_GetSupportedAttKeyIDsResponse::Swap(Response_GetSupportedAttKeyIDsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_GetSupportedAttKeyIDsResponse::InternalSwap(Response_GetSupportedAttKeyIDsResponse* other) {
  using std::swap;
  att_key_ids_.Swap(&other->att_key_ids_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcode_, other->errorcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response_GetSupportedAttKeyIDsResponse::GetTypeName() const {
  return "aesm.message.Response.GetSupportedAttKeyIDsResponse";
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->initquoteres_ = const_cast< ::aesm::message::Response_InitQuoteResponse*>(
      ::aesm::message::Response_InitQuoteResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getquoteres_ = const_cast< ::aesm::message::Response_GetQuoteResponse*>(
      ::aesm::message::Response_GetQuoteResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getlictokenres_ = const_cast< ::aesm::message::Response_GetLaunchTokenResponse*>(
      ::aesm::message::Response_GetLaunchTokenResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->reporterrres_ = const_cast< ::aesm::message::Response_ReportAttestationErrorResponse*>(
      ::aesm::message::Response_ReportAttestationErrorResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getwhitelistsizeres_ = const_cast< ::aesm::message::Response_GetWhiteListSizeResponse*>(
      ::aesm::message::Response_GetWhiteListSizeResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getwhitelistres_ = const_cast< ::aesm::message::Response_GetWhiteListResponse*>(
      ::aesm::message::Response_GetWhiteListResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->sgxgetextendedepidgroupidres_ = const_cast< ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse*>(
      ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->sgxswitchextendedepidgroupres_ = const_cast< ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse*>(
      ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->sgxregisterres_ = const_cast< ::aesm::message::Response_SGXRegisterResponse*>(
      ::aesm::message::Response_SGXRegisterResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->initquoteexres_ = const_cast< ::aesm::message::Response_InitQuoteExResponse*>(
      ::aesm::message::Response_InitQuoteExResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getquotesizeexres_ = const_cast< ::aesm::message::Response_GetQuoteSizeExResponse*>(
      ::aesm::message::Response_GetQuoteSizeExResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getquoteexres_ = const_cast< ::aesm::message::Response_GetQuoteExResponse*>(
      ::aesm::message::Response_GetQuoteExResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->checkupdatestatusres_ = const_cast< ::aesm::message::Response_CheckUpdateStatusResponse*>(
      ::aesm::message::Response_CheckUpdateStatusResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->selectattkeyidres_ = const_cast< ::aesm::message::Response_SelectAttKeyIDResponse*>(
      ::aesm::message::Response_SelectAttKeyIDResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->unsupportedrequestresponse_ = const_cast< ::aesm::message::Response_UnsupportedRequestResponse*>(
      ::aesm::message::Response_UnsupportedRequestResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getsupportedattkeyidnumres_ = const_cast< ::aesm::message::Response_GetSupportedAttKeyIDNumResponse*>(
      ::aesm::message::Response_GetSupportedAttKeyIDNumResponse::internal_default_instance());
  ::aesm::message::_Response_default_instance_._instance.get_mutable()->getsupportedattkeyidsres_ = const_cast< ::aesm::message::Response_GetSupportedAttKeyIDsResponse*>(
      ::aesm::message::Response_GetSupportedAttKeyIDsResponse::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kInitQuoteResFieldNumber;
const int Response::kGetQuoteResFieldNumber;
const int Response::kGetLicTokenResFieldNumber;
const int Response::kReportErrResFieldNumber;
const int Response::kGetWhiteListSizeResFieldNumber;
const int Response::kGetWhiteListResFieldNumber;
const int Response::kSgxGetExtendedEpidGroupIdResFieldNumber;
const int Response::kSgxSwitchExtendedEpidGroupResFieldNumber;
const int Response::kSgxRegisterResFieldNumber;
const int Response::kInitQuoteExResFieldNumber;
const int Response::kGetQuoteSizeExResFieldNumber;
const int Response::kGetQuoteExResFieldNumber;
const int Response::kCheckUpdateStatusResFieldNumber;
const int Response::kSelectAttKeyIDResFieldNumber;
const int Response::kUnsupportedRequestResponseFieldNumber;
const int Response::kGetSupportedAttKeyIDNumResFieldNumber;
const int Response::kGetSupportedAttKeyIDsResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_initquoteres()) {
    initquoteres_ = new ::aesm::message::Response_InitQuoteResponse(*from.initquoteres_);
  } else {
    initquoteres_ = NULL;
  }
  if (from.has_getquoteres()) {
    getquoteres_ = new ::aesm::message::Response_GetQuoteResponse(*from.getquoteres_);
  } else {
    getquoteres_ = NULL;
  }
  if (from.has_getlictokenres()) {
    getlictokenres_ = new ::aesm::message::Response_GetLaunchTokenResponse(*from.getlictokenres_);
  } else {
    getlictokenres_ = NULL;
  }
  if (from.has_reporterrres()) {
    reporterrres_ = new ::aesm::message::Response_ReportAttestationErrorResponse(*from.reporterrres_);
  } else {
    reporterrres_ = NULL;
  }
  if (from.has_getwhitelistsizeres()) {
    getwhitelistsizeres_ = new ::aesm::message::Response_GetWhiteListSizeResponse(*from.getwhitelistsizeres_);
  } else {
    getwhitelistsizeres_ = NULL;
  }
  if (from.has_getwhitelistres()) {
    getwhitelistres_ = new ::aesm::message::Response_GetWhiteListResponse(*from.getwhitelistres_);
  } else {
    getwhitelistres_ = NULL;
  }
  if (from.has_sgxgetextendedepidgroupidres()) {
    sgxgetextendedepidgroupidres_ = new ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse(*from.sgxgetextendedepidgroupidres_);
  } else {
    sgxgetextendedepidgroupidres_ = NULL;
  }
  if (from.has_sgxswitchextendedepidgroupres()) {
    sgxswitchextendedepidgroupres_ = new ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse(*from.sgxswitchextendedepidgroupres_);
  } else {
    sgxswitchextendedepidgroupres_ = NULL;
  }
  if (from.has_sgxregisterres()) {
    sgxregisterres_ = new ::aesm::message::Response_SGXRegisterResponse(*from.sgxregisterres_);
  } else {
    sgxregisterres_ = NULL;
  }
  if (from.has_initquoteexres()) {
    initquoteexres_ = new ::aesm::message::Response_InitQuoteExResponse(*from.initquoteexres_);
  } else {
    initquoteexres_ = NULL;
  }
  if (from.has_getquotesizeexres()) {
    getquotesizeexres_ = new ::aesm::message::Response_GetQuoteSizeExResponse(*from.getquotesizeexres_);
  } else {
    getquotesizeexres_ = NULL;
  }
  if (from.has_getquoteexres()) {
    getquoteexres_ = new ::aesm::message::Response_GetQuoteExResponse(*from.getquoteexres_);
  } else {
    getquoteexres_ = NULL;
  }
  if (from.has_checkupdatestatusres()) {
    checkupdatestatusres_ = new ::aesm::message::Response_CheckUpdateStatusResponse(*from.checkupdatestatusres_);
  } else {
    checkupdatestatusres_ = NULL;
  }
  if (from.has_selectattkeyidres()) {
    selectattkeyidres_ = new ::aesm::message::Response_SelectAttKeyIDResponse(*from.selectattkeyidres_);
  } else {
    selectattkeyidres_ = NULL;
  }
  if (from.has_unsupportedrequestresponse()) {
    unsupportedrequestresponse_ = new ::aesm::message::Response_UnsupportedRequestResponse(*from.unsupportedrequestresponse_);
  } else {
    unsupportedrequestresponse_ = NULL;
  }
  if (from.has_getsupportedattkeyidnumres()) {
    getsupportedattkeyidnumres_ = new ::aesm::message::Response_GetSupportedAttKeyIDNumResponse(*from.getsupportedattkeyidnumres_);
  } else {
    getsupportedattkeyidnumres_ = NULL;
  }
  if (from.has_getsupportedattkeyidsres()) {
    getsupportedattkeyidsres_ = new ::aesm::message::Response_GetSupportedAttKeyIDsResponse(*from.getsupportedattkeyidsres_);
  } else {
    getsupportedattkeyidsres_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response)
}

void Response::SharedCtor() {
  ::memset(&initquoteres_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getsupportedattkeyidsres_) -
      reinterpret_cast<char*>(&initquoteres_)) + sizeof(getsupportedattkeyidsres_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:aesm.message.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != internal_default_instance()) delete initquoteres_;
  if (this != internal_default_instance()) delete getquoteres_;
  if (this != internal_default_instance()) delete getlictokenres_;
  if (this != internal_default_instance()) delete reporterrres_;
  if (this != internal_default_instance()) delete getwhitelistsizeres_;
  if (this != internal_default_instance()) delete getwhitelistres_;
  if (this != internal_default_instance()) delete sgxgetextendedepidgroupidres_;
  if (this != internal_default_instance()) delete sgxswitchextendedepidgroupres_;
  if (this != internal_default_instance()) delete sgxregisterres_;
  if (this != internal_default_instance()) delete initquoteexres_;
  if (this != internal_default_instance()) delete getquotesizeexres_;
  if (this != internal_default_instance()) delete getquoteexres_;
  if (this != internal_default_instance()) delete checkupdatestatusres_;
  if (this != internal_default_instance()) delete selectattkeyidres_;
  if (this != internal_default_instance()) delete unsupportedrequestresponse_;
  if (this != internal_default_instance()) delete getsupportedattkeyidnumres_;
  if (this != internal_default_instance()) delete getsupportedattkeyidsres_;
}

void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Response.base);
  return *internal_default_instance();
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:aesm.message.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(initquoteres_ != NULL);
      initquoteres_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(getquoteres_ != NULL);
      getquoteres_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(getlictokenres_ != NULL);
      getlictokenres_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reporterrres_ != NULL);
      reporterrres_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(getwhitelistsizeres_ != NULL);
      getwhitelistsizeres_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(getwhitelistres_ != NULL);
      getwhitelistres_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(sgxgetextendedepidgroupidres_ != NULL);
      sgxgetextendedepidgroupidres_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(sgxswitchextendedepidgroupres_ != NULL);
      sgxswitchextendedepidgroupres_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(sgxregisterres_ != NULL);
      sgxregisterres_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(initquoteexres_ != NULL);
      initquoteexres_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(getquotesizeexres_ != NULL);
      getquotesizeexres_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(getquoteexres_ != NULL);
      getquoteexres_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(checkupdatestatusres_ != NULL);
      checkupdatestatusres_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(selectattkeyidres_ != NULL);
      selectattkeyidres_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(unsupportedrequestresponse_ != NULL);
      unsupportedrequestresponse_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(getsupportedattkeyidnumres_ != NULL);
      getsupportedattkeyidnumres_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(getsupportedattkeyidsres_ != NULL);
    getsupportedattkeyidsres_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aesm.message.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initquoteres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getquoteres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getlictokenres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reporterrres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getwhitelistsizeres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getwhitelistres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sgxgetextendedepidgroupidres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sgxswitchextendedepidgroupres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sgxregisterres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.InitQuoteExResponse initQuoteExRes = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initquoteexres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.GetQuoteSizeExResponse getQuoteSizeExRes = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getquotesizeexres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.GetQuoteExResponse getQuoteExRes = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getquoteexres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.CheckUpdateStatusResponse checkUpdateStatusRes = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_checkupdatestatusres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.SelectAttKeyIDResponse selectAttKeyIDRes = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selectattkeyidres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.UnsupportedRequestResponse unsupportedRequestResponse = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unsupportedrequestresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.GetSupportedAttKeyIDNumResponse getSupportedAttKeyIDNumRes = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getsupportedattkeyidnumres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .aesm.message.Response.GetSupportedAttKeyIDsResponse getSupportedAttKeyIDsRes = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getsupportedattkeyidsres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_initquoteres(), output);
  }

  // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_getquoteres(), output);
  }

  // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_getlictokenres(), output);
  }

  // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_reporterrres(), output);
  }

  // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->_internal_getwhitelistsizeres(), output);
  }

  // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->_internal_getwhitelistres(), output);
  }

  // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->_internal_sgxgetextendedepidgroupidres(), output);
  }

  // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->_internal_sgxswitchextendedepidgroupres(), output);
  }

  // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->_internal_sgxregisterres(), output);
  }

  // optional .aesm.message.Response.InitQuoteExResponse initQuoteExRes = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->_internal_initquoteexres(), output);
  }

  // optional .aesm.message.Response.GetQuoteSizeExResponse getQuoteSizeExRes = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->_internal_getquotesizeexres(), output);
  }

  // optional .aesm.message.Response.GetQuoteExResponse getQuoteExRes = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->_internal_getquoteexres(), output);
  }

  // optional .aesm.message.Response.CheckUpdateStatusResponse checkUpdateStatusRes = 18;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->_internal_checkupdatestatusres(), output);
  }

  // optional .aesm.message.Response.SelectAttKeyIDResponse selectAttKeyIDRes = 19;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->_internal_selectattkeyidres(), output);
  }

  // optional .aesm.message.Response.UnsupportedRequestResponse unsupportedRequestResponse = 20;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->_internal_unsupportedrequestresponse(), output);
  }

  // optional .aesm.message.Response.GetSupportedAttKeyIDNumResponse getSupportedAttKeyIDNumRes = 21;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->_internal_getsupportedattkeyidnumres(), output);
  }

  // optional .aesm.message.Response.GetSupportedAttKeyIDsResponse getSupportedAttKeyIDsRes = 22;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->_internal_getsupportedattkeyidsres(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:aesm.message.Response)
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesm.message.Response)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
    if (has_initquoteres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *initquoteres_);
    }

    // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
    if (has_getquoteres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getquoteres_);
    }

    // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
    if (has_getlictokenres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getlictokenres_);
    }

    // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
    if (has_reporterrres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reporterrres_);
    }

    // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
    if (has_getwhitelistsizeres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getwhitelistsizeres_);
    }

    // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
    if (has_getwhitelistres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getwhitelistres_);
    }

    // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
    if (has_sgxgetextendedepidgroupidres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sgxgetextendedepidgroupidres_);
    }

    // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
    if (has_sgxswitchextendedepidgroupres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sgxswitchextendedepidgroupres_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
    if (has_sgxregisterres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sgxregisterres_);
    }

    // optional .aesm.message.Response.InitQuoteExResponse initQuoteExRes = 15;
    if (has_initquoteexres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *initquoteexres_);
    }

    // optional .aesm.message.Response.GetQuoteSizeExResponse getQuoteSizeExRes = 16;
    if (has_getquotesizeexres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getquotesizeexres_);
    }

    // optional .aesm.message.Response.GetQuoteExResponse getQuoteExRes = 17;
    if (has_getquoteexres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getquoteexres_);
    }

    // optional .aesm.message.Response.CheckUpdateStatusResponse checkUpdateStatusRes = 18;
    if (has_checkupdatestatusres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *checkupdatestatusres_);
    }

    // optional .aesm.message.Response.SelectAttKeyIDResponse selectAttKeyIDRes = 19;
    if (has_selectattkeyidres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *selectattkeyidres_);
    }

    // optional .aesm.message.Response.UnsupportedRequestResponse unsupportedRequestResponse = 20;
    if (has_unsupportedrequestresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unsupportedrequestresponse_);
    }

    // optional .aesm.message.Response.GetSupportedAttKeyIDNumResponse getSupportedAttKeyIDNumRes = 21;
    if (has_getsupportedattkeyidnumres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getsupportedattkeyidnumres_);
    }

  }
  // optional .aesm.message.Response.GetSupportedAttKeyIDsResponse getSupportedAttKeyIDsRes = 22;
  if (has_getsupportedattkeyidsres()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *getsupportedattkeyidsres_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response*>(&from));
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesm.message.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_initquoteres()->::aesm::message::Response_InitQuoteResponse::MergeFrom(from.initquoteres());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_getquoteres()->::aesm::message::Response_GetQuoteResponse::MergeFrom(from.getquoteres());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_getlictokenres()->::aesm::message::Response_GetLaunchTokenResponse::MergeFrom(from.getlictokenres());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_reporterrres()->::aesm::message::Response_ReportAttestationErrorResponse::MergeFrom(from.reporterrres());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_getwhitelistsizeres()->::aesm::message::Response_GetWhiteListSizeResponse::MergeFrom(from.getwhitelistsizeres());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_getwhitelistres()->::aesm::message::Response_GetWhiteListResponse::MergeFrom(from.getwhitelistres());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_sgxgetextendedepidgroupidres()->::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse::MergeFrom(from.sgxgetextendedepidgroupidres());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_sgxswitchextendedepidgroupres()->::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse::MergeFrom(from.sgxswitchextendedepidgroupres());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_sgxregisterres()->::aesm::message::Response_SGXRegisterResponse::MergeFrom(from.sgxregisterres());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_initquoteexres()->::aesm::message::Response_InitQuoteExResponse::MergeFrom(from.initquoteexres());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_getquotesizeexres()->::aesm::message::Response_GetQuoteSizeExResponse::MergeFrom(from.getquotesizeexres());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_getquoteexres()->::aesm::message::Response_GetQuoteExResponse::MergeFrom(from.getquoteexres());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_checkupdatestatusres()->::aesm::message::Response_CheckUpdateStatusResponse::MergeFrom(from.checkupdatestatusres());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_selectattkeyidres()->::aesm::message::Response_SelectAttKeyIDResponse::MergeFrom(from.selectattkeyidres());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_unsupportedrequestresponse()->::aesm::message::Response_UnsupportedRequestResponse::MergeFrom(from.unsupportedrequestresponse());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_getsupportedattkeyidnumres()->::aesm::message::Response_GetSupportedAttKeyIDNumResponse::MergeFrom(from.getsupportedattkeyidnumres());
    }
  }
  if (cached_has_bits & 0x00010000u) {
    mutable_getsupportedattkeyidsres()->::aesm::message::Response_GetSupportedAttKeyIDsResponse::MergeFrom(from.getsupportedattkeyidsres());
  }
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesm.message.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if (has_initquoteres()) {
    if (!this->initquoteres_->IsInitialized()) return false;
  }
  if (has_getquoteres()) {
    if (!this->getquoteres_->IsInitialized()) return false;
  }
  if (has_getlictokenres()) {
    if (!this->getlictokenres_->IsInitialized()) return false;
  }
  if (has_reporterrres()) {
    if (!this->reporterrres_->IsInitialized()) return false;
  }
  if (has_getwhitelistsizeres()) {
    if (!this->getwhitelistsizeres_->IsInitialized()) return false;
  }
  if (has_getwhitelistres()) {
    if (!this->getwhitelistres_->IsInitialized()) return false;
  }
  if (has_sgxgetextendedepidgroupidres()) {
    if (!this->sgxgetextendedepidgroupidres_->IsInitialized()) return false;
  }
  if (has_sgxswitchextendedepidgroupres()) {
    if (!this->sgxswitchextendedepidgroupres_->IsInitialized()) return false;
  }
  if (has_sgxregisterres()) {
    if (!this->sgxregisterres_->IsInitialized()) return false;
  }
  if (has_initquoteexres()) {
    if (!this->initquoteexres_->IsInitialized()) return false;
  }
  if (has_getquotesizeexres()) {
    if (!this->getquotesizeexres_->IsInitialized()) return false;
  }
  if (has_getquoteexres()) {
    if (!this->getquoteexres_->IsInitialized()) return false;
  }
  if (has_checkupdatestatusres()) {
    if (!this->checkupdatestatusres_->IsInitialized()) return false;
  }
  if (has_selectattkeyidres()) {
    if (!this->selectattkeyidres_->IsInitialized()) return false;
  }
  if (has_unsupportedrequestresponse()) {
    if (!this->unsupportedrequestresponse_->IsInitialized()) return false;
  }
  if (has_getsupportedattkeyidnumres()) {
    if (!this->getsupportedattkeyidnumres_->IsInitialized()) return false;
  }
  if (has_getsupportedattkeyidsres()) {
    if (!this->getsupportedattkeyidsres_->IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  swap(initquoteres_, other->initquoteres_);
  swap(getquoteres_, other->getquoteres_);
  swap(getlictokenres_, other->getlictokenres_);
  swap(reporterrres_, other->reporterrres_);
  swap(getwhitelistsizeres_, other->getwhitelistsizeres_);
  swap(getwhitelistres_, other->getwhitelistres_);
  swap(sgxgetextendedepidgroupidres_, other->sgxgetextendedepidgroupidres_);
  swap(sgxswitchextendedepidgroupres_, other->sgxswitchextendedepidgroupres_);
  swap(sgxregisterres_, other->sgxregisterres_);
  swap(initquoteexres_, other->initquoteexres_);
  swap(getquotesizeexres_, other->getquotesizeexres_);
  swap(getquoteexres_, other->getquoteexres_);
  swap(checkupdatestatusres_, other->checkupdatestatusres_);
  swap(selectattkeyidres_, other->selectattkeyidres_);
  swap(unsupportedrequestresponse_, other->unsupportedrequestresponse_);
  swap(getsupportedattkeyidnumres_, other->getsupportedattkeyidnumres_);
  swap(getsupportedattkeyidsres_, other->getsupportedattkeyidsres_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Response::GetTypeName() const {
  return "aesm.message.Response";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
}  // namespace aesm
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_InitQuoteRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_InitQuoteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_InitQuoteRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_GetQuoteRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetQuoteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_GetQuoteRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_GetLaunchTokenRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetLaunchTokenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_GetLaunchTokenRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_ReportAttestationErrorRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_ReportAttestationErrorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_ReportAttestationErrorRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_CheckUpdateStatusRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_CheckUpdateStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_CheckUpdateStatusRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_GetWhiteListSizeRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetWhiteListSizeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_GetWhiteListSizeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_GetWhiteListRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetWhiteListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_GetWhiteListRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_SGXRegisterRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_SGXRegisterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_SGXRegisterRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_InitQuoteExRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_InitQuoteExRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_InitQuoteExRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_SelectAttKeyIDRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_SelectAttKeyIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_SelectAttKeyIDRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_GetQuoteSizeExRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetQuoteSizeExRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_GetQuoteSizeExRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_GetQuoteExRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetQuoteExRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_GetQuoteExRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_GetSupportedAttKeyIDNumRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetSupportedAttKeyIDNumRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_GetSupportedAttKeyIDNumRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request_GetSupportedAttKeyIDsRequest* Arena::CreateMaybeMessage< ::aesm::message::Request_GetSupportedAttKeyIDsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request_GetSupportedAttKeyIDsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Request* Arena::CreateMaybeMessage< ::aesm::message::Request >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_InitQuoteResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_InitQuoteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_InitQuoteResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_GetQuoteResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetQuoteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_GetQuoteResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_GetLaunchTokenResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetLaunchTokenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_GetLaunchTokenResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_ReportAttestationErrorResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_ReportAttestationErrorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_ReportAttestationErrorResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_CheckUpdateStatusResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_CheckUpdateStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_CheckUpdateStatusResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_GetWhiteListSizeResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetWhiteListSizeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_GetWhiteListSizeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_GetWhiteListResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetWhiteListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_GetWhiteListResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_SGXRegisterResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_SGXRegisterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_SGXRegisterResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_SelectAttKeyIDResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_SelectAttKeyIDResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_SelectAttKeyIDResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_InitQuoteExResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_InitQuoteExResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_InitQuoteExResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_GetQuoteSizeExResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetQuoteSizeExResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_GetQuoteSizeExResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_GetQuoteExResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetQuoteExResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_GetQuoteExResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_UnsupportedRequestResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_UnsupportedRequestResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_UnsupportedRequestResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_GetSupportedAttKeyIDNumResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetSupportedAttKeyIDNumResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_GetSupportedAttKeyIDNumResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response_GetSupportedAttKeyIDsResponse* Arena::CreateMaybeMessage< ::aesm::message::Response_GetSupportedAttKeyIDsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response_GetSupportedAttKeyIDsResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aesm::message::Response* Arena::CreateMaybeMessage< ::aesm::message::Response >(Arena* arena) {
  return Arena::CreateInternal< ::aesm::message::Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
